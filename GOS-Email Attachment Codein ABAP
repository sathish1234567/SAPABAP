*&---------------------------------------------------------------------*
*& Report YSAT_GOS
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT YSAT_GOS.

PARAMETERS : P_LINK  TYPE SIBFBORIID,
             P_OBJTY TYPE SIBFTYPEID.

START-OF-SELECTION.
  SELECT SINGLE * FROM SRGBTBREL
         INTO @DATA(LS_SRGBTBREL)
         WHERE INSTID_A = @P_LINK AND
               TYPEID_A = @P_OBJTY.
  IF SY-SUBRC EQ 0.
    WRITE SY-SUBRC.
  ENDIF.

  DATA : WA_OBJECT       TYPE SIBFLPORB,
         INT_REL_OPTIONS TYPE OBL_T_RELT,
         WA_REL_OPTIONS  TYPE OBL_S_RELT,
         INT_LINKS       TYPE OBL_T_LINK,
         WA_LINKS        TYPE OBL_S_LINK.

  WA_REL_OPTIONS-LOW = 'ATTA'. "" Attachemnts
  WA_REL_OPTIONS-SIGN = 'I'.
  WA_REL_OPTIONS-OPTION = 'EQ'.
  APPEND WA_REL_OPTIONS TO INT_REL_OPTIONS.

  WA_OBJECT-INSTID = P_LINK.  "(THIS IS THE PR NUMBER)
  WA_OBJECT-TYPEID = P_OBJTY. "" PR
  WA_OBJECT-CATID  = 'BO'. "" Business Object
  REFRESH INT_LINKS[].

  TRY.
      CALL METHOD CL_BINARY_RELATION=>READ_LINKS_OF_BINRELS
        EXPORTING
          IS_OBJECT           = WA_OBJECT          " Start object
          IT_RELATION_OPTIONS = INT_REL_OPTIONS    " Link Types
          IP_ROLE             = 'GOSAPPLOBJ'       " Role type
        IMPORTING
          ET_LINKS            = INT_LINKS.         " Table with Relationship Records

    CATCH CX_OBL_PARAMETER_ERROR. " Incorrect Calling of Interface
    CATCH CX_OBL_INTERNAL_ERROR.  " Internal Error of Relationship Service
    CATCH CX_OBL_MODEL_ERROR.     " Error with Model Roles
  ENDTRY.

  DATA : LV_DOC_ID      TYPE SOFOLENTI1-DOC_ID,
         INT_CONT_BIN   TYPE TABLE OF SOLISTI1,
         INT_CONT_SOLIX TYPE TABLE OF SOLIX,
         WA_DOC_DATA    TYPE SOFOLENTI1.

  LOOP AT INT_LINKS INTO WA_LINKS.
    LV_DOC_ID = WA_LINKS-INSTID_B.

    REFRESH INT_CONT_BIN[].
    REFRESH INT_CONT_SOLIX[].

    CALL FUNCTION 'SO_DOCUMENT_READ_API1'
      EXPORTING
        DOCUMENT_ID                = LV_DOC_ID
      IMPORTING
        DOCUMENT_DATA              = WA_DOC_DATA
      TABLES
        CONTENTS_HEX               = INT_CONT_SOLIX
        OBJECT_CONTENT             = INT_CONT_BIN
      EXCEPTIONS
        DOCUMENT_ID_NOT_EXIST      = 1
        OPERATION_NO_AUTHORIZATION = 2
        X_ERROR                    = 3
        OTHERS                     = 4.
    IF SY-SUBRC <> 0.
* Implement suitable error handling here
    ENDIF.
  ENDLOOP.

  TABLES : SOMLRECI1,ADR6.
  "Data declaration for file names
  DATA : GV_FILE1 TYPE STRING,
         GV_FILE2 TYPE STRING,
         GV_FILE3 TYPE STRING,
         GV_FILE4 TYPE STRING.
  "Data declaration for file content after file upload
  DATA : IT_BIN_B1 TYPE STANDARD TABLE OF SOLIX,
         IT_BIN_B2 TYPE STANDARD TABLE OF SOLIX,
         IT_BIN_B3 TYPE STANDARD TABLE OF SOLIX,
         IT_BIN_B4 TYPE STANDARD TABLE OF SOLIX.
  "For the font in Email Body
*DATA : GV_FONTA11 TYPE STRING VALUE '<P style="font-family:arial;fontsize:
*15;">'.
  "Class data declaration
  DATA: GO_SEND_REQUEST  TYPE REF TO CL_BCS,
        GO_DOCUMENT      TYPE REF TO CL_DOCUMENT_BCS,
        LO_SENDER        TYPE REF TO CL_SAPUSER_BCS,
        LO_SENDERINT     TYPE REF TO CL_CAM_ADDRESS_BCS,
        LO_RECIPIENT     TYPE REF TO IF_RECIPIENT_BCS,
        LO_BCS_EXCEPTION TYPE REF TO CX_BCS,
        GV_SUB           TYPE STRING,
        LV_SENT_TO_ALL   TYPE OS_BOOLEAN.
  "Internal Table for HTML email body
  DATA : IT_CONTENTS TYPE STANDARD TABLE OF SOLISTI1,
         WA_CONTENTS TYPE SOLISTI1.
  "for four character file extensions
  DATA : LT_ATT_HEAD  TYPE SOLI_TAB,
         LV_TEXT_LINE TYPE SOLI,
         LV_FILENAME  TYPE STRING,
         EV_EXTENSION TYPE STRING,
         EV_FILENAME  TYPE STRING.
  "For attachment subjects and attachment type.
  DATA : SUBJ_B1 TYPE SO_OBJ_DES,
         ATT_B1  TYPE SOODK-OBJTP,
         SUBJ_B2 TYPE SO_OBJ_DES,
         ATT_B2  TYPE SOODK-OBJTP,
         SUBJ_B3 TYPE SO_OBJ_DES,
         ATT_B3  TYPE SOODK-OBJTP,
         SUBJ_B4 TYPE SO_OBJ_DES,
         ATT_B4  TYPE SOODK-OBJTP.

  IT_BIN_B1 = INT_CONT_SOLIX.
  BREAK-POINT.
  IF NOT IT_BIN_B1 IS INITIAL.
    WA_CONTENTS-LINE = 'Testing the GOS service'.
    APPEND WA_CONTENTS TO IT_CONTENTS.

    GO_SEND_REQUEST = CL_BCS=>CREATE_PERSISTENT( ).
    GO_DOCUMENT = CL_DOCUMENT_BCS=>CREATE_DOCUMENT(
    I_TYPE = 'HTM'
    I_TEXT = IT_CONTENTS
* i_length = '12'
    I_SUBJECT = '' ).
    "For email subject more than 50 Char
    GV_SUB = 'Email from SAP with multiple attachment in any format and HTML Email Body !'.
    CALL METHOD GO_SEND_REQUEST->SET_MESSAGE_SUBJECT
      EXPORTING
        IP_SUBJECT = GV_SUB.
    "attachmentment


    CLEAR : EV_FILENAME, EV_EXTENSION, LV_FILENAME, LV_TEXT_LINE, LT_ATT_HEAD[].

    CONCATENATE "WA_DOC_DATA-OBJ_DESCR
              WA_DOC_DATA-CREAT_DATE WA_DOC_DATA-CREAT_TIME INTO SUBJ_B1.
    EV_EXTENSION  = ATT_B1 = WA_DOC_DATA-OBJ_TYPE.
    CONCATENATE SUBJ_B1 '.' EV_EXTENSION INTO LV_FILENAME.
    CONCATENATE '&SO_FILENAME=' LV_FILENAME INTO LV_TEXT_LINE.
    APPEND LV_TEXT_LINE TO LT_ATT_HEAD.
    "end of subject atachment
    TRY.
*-- Add Attachment to the Document
        CALL METHOD GO_DOCUMENT->ADD_ATTACHMENT
          EXPORTING
            I_ATTACHMENT_TYPE    = ATT_B1 "l_att_type
            I_ATTACHMENT_SUBJECT = SUBJ_B1
            I_ATT_CONTENT_HEX    = IT_BIN_B1[]
            I_ATTACHMENT_HEADER  = LT_ATT_HEAD.
      CATCH CX_DOCUMENT_BCS.
    ENDTRY.

* ADD DOCUMENT TO SEND REQUEST
    CALL METHOD GO_SEND_REQUEST->SET_DOCUMENT( GO_DOCUMENT ).
* add recipient with its respective attributes to send request
    DATA R_ADR TYPE  AD_SMTPADR VALUE 'sathish@gmail.com'.
*    LOOP AT S_RCVRS.
    LO_RECIPIENT = CL_CAM_ADDRESS_BCS=>CREATE_INTERNET_ADDRESS(
    R_ADR ).
    CALL METHOD GO_SEND_REQUEST->ADD_RECIPIENT
      EXPORTING
        I_RECIPIENT = LO_RECIPIENT
        I_EXPRESS   = 'X'.
*      CLEAR : S_RCVRS.
*    ENDLOOP.

    CALL METHOD GO_SEND_REQUEST->SET_SEND_IMMEDIATELY
      EXPORTING
        I_SEND_IMMEDIATELY = 'X'.
    CALL METHOD GO_SEND_REQUEST->SEND(
      EXPORTING
        I_WITH_ERROR_SCREEN = 'X'
      RECEIVING
        RESULT              = LV_SENT_TO_ALL ).
    IF LV_SENT_TO_ALL = 'X'.
      MESSAGE I000(8I) WITH 'Email send succesfully'.
    ELSEIF LV_SENT_TO_ALL IS INITIAL.
      MESSAGE I000(8I) WITH 'Email not send'.
    ENDIF.
    COMMIT WORK.
*  CATCH CX_BCS INTO LO_BCS_EXCEPTION.
*ENDTRY.
  ENDIF.
