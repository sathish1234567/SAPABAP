*&---------------------------------------------------------------------*
*& Report  ZDMS_DRF_REQ
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT zdms_drf_req NO STANDARD PAGE HEADING.

INCLUDE zdms_drf_req_top.

INCLUDE zdms_drf_req_sub.

INITIALIZATION.
  PERFORM init.
  IF gv_ucomm IS INITIAL.
    gv_ucomm = 'ZDMS1'.
  ENDIF.
  p_date = sy-datum.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR frm_dept.
  PERFORM f4_help USING 'FRM_DEPT'.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR to_dept.
  PERFORM f4_help USING 'TO_DEPT'.

AT SELECTION-SCREEN OUTPUT.
  PERFORM modify_screen.


START-OF-SELECTION.
  PERFORM validate.
*  CREATE OBJECT lo_zdmsdrf.
**  lo_zdmsdrf->get_data_zdms2( ).
  CALL SCREEN '102'.
  __________________________________________________________________
  __________________________________________________________________
  __________________________________________________________________
  __________________________________________________________________
  
  *&---------------------------------------------------------------------*
*&  Include           ZDMS_DRF_REQ_TOP
*&---------------------------------------------------------------------*
TABLES : zdms_drf.
TYPES : BEGIN OF gty_outtab,
          chk        TYPE char1,
          srno       TYPE zdms_srlno,
          frm_dept   TYPE zdms_frdeptno,
          to_dept    TYPE zdms_todeptno,
          title      TYPE zdms_titlenm,
          format_no  TYPE zdms_formatno,
          book_nm    TYPE zdms_booknm,
          no_copies  TYPE zdms_nocopies,
          req_reason TYPE zdms_reqreason,
          req_by     TYPE zdms_reqby,
          req_dt     TYPE zdms_reqdt,
          apr_by     TYPE zdms_aprby,
          apr_dt     TYPE zdms_aprdt,
          iss_by     TYPE zdms_issby,
          iss_dt     TYPE zdms_issdt,
          rec_by     TYPE zdms_recby,
          rec_dt     TYPE zdms_recdt,
          drn_no     TYPE zdms_drnno,
          doknr      TYPE doknr,
          dokar      TYPE dokar,
          dokvr      TYPE dokvr,
          doktl      TYPE doktl_d,
*          celltab    TYPE lvc_t_styl,
        END OF gty_outtab.


DATA : gt_outtab TYPE TABLE OF gty_outtab.
DATA : gs_outtab TYPE gty_outtab.
DATA lv_flag TYPE char1.
DATA : g_container          TYPE scrfname,
       obj_dock             TYPE REF TO cl_gui_docking_container,
       obj_split            TYPE REF TO cl_gui_easy_splitter_container,
       dg_dyndoc_id         TYPE REF TO cl_dd_document,
       o_top_container      TYPE REF TO cl_gui_container,   "Top Container
       o_bottom_container   TYPE REF TO cl_gui_container, "Bottom Container.
       g_grid               TYPE REF TO cl_gui_alv_grid,
*       dg_dyndoc_id       TYPE REF TO cl_dd_document,
       g_custom_container   TYPE REF TO cl_gui_custom_container,
       gt_fieldcat          TYPE lvc_t_fcat,
       gs_layout            TYPE lvc_s_layo,
       gv_ucomm             TYPE  syucomm,
       gv_update            TYPE  char1,
       gv_dms               TYPE  char1,
       gs_stable            TYPE lvc_s_stbl,
       gt_fields_f4         TYPE lvc_t_f4,
       gs_fields_f4         TYPE lvc_s_f4,
       gt_dropdown          TYPE lvc_t_drop,
       gs_dropdown          TYPE lvc_s_drop,
       gt_dropdown_al       TYPE lvc_t_dral,
       gs_dropdown_al       TYPE lvc_s_dral,
       gt_zdmsdrf           TYPE TABLE OF zdms_drf,
       gs_zdmsdrf           TYPE zdms_drf,
       gr_docking_container TYPE REF TO cl_gui_docking_container.


FIELD-SYMBOLS :<gs_outtab> TYPE gty_outtab.
FIELD-SYMBOLS :<gs_zdmsdrf> TYPE zdms_drf.
CLASS lcl_zdmsdrf DEFINITION DEFERRED.
DATA lo_zdmsdrf TYPE REF TO lcl_zdmsdrf.
INCLUDE zdms_drf_req_scr.

CLASS lcl_zdmsdrf DEFINITION.
  PUBLIC SECTION.
    METHODS :
      handle_toolbar
                  FOR EVENT toolbar OF cl_gui_alv_grid
        IMPORTING e_object
                  e_interactive,
      handle_data_changed
                  FOR EVENT data_changed OF cl_gui_alv_grid
        IMPORTING er_data_changed,
      handle_user_command
                  FOR EVENT user_command OF cl_gui_alv_grid
        IMPORTING e_ucomm,
      handle_on_f4
                  FOR EVENT onf4 OF cl_gui_alv_grid
        IMPORTING sender
                  e_fieldname
                  e_fieldvalue
                  es_row_no
                  er_event_data
                  et_bad_cells
                  e_display,
      handle_top_of_page FOR EVENT top_of_page OF cl_gui_alv_grid
        IMPORTING e_dyndoc_id table_index,
      update,
      append_row,
      get_data_zdms2,
      duplicate_validate,
      upload_dms,
      dms_show,
      refresh_grid IMPORTING lo_grid TYPE REF TO cl_gui_alv_grid.
ENDCLASS.

CLASS lcl_zdmsdrf IMPLEMENTATION.
  METHOD dms_show.

    DATA ls_draw TYPE draw.
    CLEAR gs_outtab.
    READ TABLE gt_outtab INTO gs_outtab INDEX 1.
    IF sy-subrc EQ 0.
      ls_draw-doknr = gs_outtab-doknr.
      ls_draw-dokvr = gs_outtab-dokvr.
      ls_draw-dokar = gs_outtab-dokar.
      ls_draw-doktl = gs_outtab-doktl.

      CALL FUNCTION 'DOCUMENT_SHOW_DIRECT'
        EXPORTING
          dokar       = ls_draw-dokar
          doknr       = ls_draw-doknr
          dokteil     = ls_draw-doktl
          dokvr       = ls_draw-dokvr
        EXCEPTIONS
          not_found   = 1
          no_auth     = 2
          no_original = 3.
      IF sy-subrc NE 0.
        MESSAGE 'Error in display the DMS' TYPE 'I'
        DISPLAY LIKE 'E'.
        LEAVE TO SCREEN '102'.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD upload_dms.
    DATA lv_drnno TYPE zdms_drnno.
    DATA: file_name         TYPE draw-filep.
    DATA lt_tdwp TYPE TABLE OF tdwp.
    DATA v_wsappl TYPE draw-dappl.
    DATA: ls_files          TYPE bapi_doc_files2.
    DATA: ls_documentdata   TYPE bapi_doc_draw2.
    DATA: it_files          TYPE TABLE OF bapi_doc_files2.
    DATA: wa_return         TYPE bapiret2.
    DATA: v_documentnumber  TYPE bapi_doc_aux-docnumber.
    DATA: v_documentdata    TYPE bapi_doc_draw2.
    DATA: v_documentdatax   TYPE bapi_doc_drawx2.
    DATA: wa_objectlinks    TYPE bapi_doc_drad.
    DATA: it_objectlinks    TYPE TABLE OF bapi_doc_drad.
    DATA: v_objkey          TYPE drad-objky.
    DATA: v_doknr           TYPE drad-doknr.
    DATA lt_file_table TYPE TABLE OF sdokpath.
    DATA ls_file_table TYPE sdokpath.
    DATA: v_documenttype    TYPE bapi_doc_aux-doctype.
    DATA: v_documentnum     TYPE bapi_doc_aux-docnumber.
    DATA: v_documentpart    TYPE bapi_doc_aux-docpart.
    DATA: v_documentversion TYPE bapi_doc_aux-docversion.
*    DATA: v_documentdata    TYPE bapi_doc_draw2.
*    DATA: v_documentdatax   TYPE bapi_doc_drawx2.
    CLEAR gs_zdmsdrf.
    " always one DRN_no generate to multiple records
    CLEAR gs_outtab.
    READ TABLE gt_outtab INTO gs_outtab INDEX 1.
    IF sy-subrc EQ 0.
      DO 5 TIMES.
        SELECT SINGLE drn_no
               FROM zdms_drf
               INTO lv_drnno
               WHERE drn_no = gs_outtab-drn_no.
        IF sy-subrc EQ 0.
          EXIT.
        ENDIF.
      ENDDO.
      IF lv_drnno IS INITIAL.
        MESSAGE 'DRN No is required for DMS' TYPE 'I'
        DISPLAY LIKE 'E'.
        LEAVE TO SCREEN '102'.
      ELSE.
* get the dms document number based on acounting document key if exist in drad
        v_objkey = lv_drnno.
        SELECT SINGLE doknr INTO v_doknr FROM drad
               WHERE objky EQ v_objkey.
        IF v_doknr IS INITIAL.

          " allowing up to 255 chars
          CALL FUNCTION 'TMP_GUI_FILE_OPEN_DIALOG'
            EXPORTING
              window_title = 'File Upload'
*             DEFAULT_EXTENSION       =
*             DEFAULT_FILENAME        =
*             FILE_FILTER  =
*             INIT_DIRECTORY          =
*             MULTISELECTION          =
*         IMPORTING
*             RC           =
            TABLES
              file_table   = lt_file_table
            EXCEPTIONS
              cntl_error   = 1
              OTHERS       = 2.
          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_file_table INTO ls_file_table INDEX 1.
            IF sy-subrc EQ 0.
              file_name = ls_file_table-pathname.
            ENDIF.
          ENDIF.
          IF NOT file_name IS INITIAL.

            CALL FUNCTION 'CV120_DOC_GET_APPL'
              EXPORTING
*               PF_DIALOG =
*               PF_DISPLAY       =
                pf_file   = file_name
*               PF_TYPDT  =
              IMPORTING
                pfx_dappl = v_wsappl "type TDWE-TYPDT
              TABLES
                ptx_tdwp  = lt_tdwp.

            ls_files-storagecategory = 'ZFI'. "'DMS_C1_ST'.
            ls_files-docfile         = file_name.
            ls_files-wsapplication   = v_wsappl. "'TXT'.
            APPEND ls_files TO it_files.
            CLEAR: ls_files, v_wsappl.

            ls_documentdata-documenttype    = 'ZFI'.
            ls_documentdata-documentversion = '00'.
            ls_documentdata-documentpart    = '000'.
            ls_documentdata-description     = 'DMS-DRF'.
            ls_documentdata-username        = sy-uname.
            ls_documentdata-datacarrier1    = 'ZFI'.

*            wa_objectlinks-objecttype = 'BKPF'.
*            wa_objectlinks-objectkey  = v_objkey.
*            APPEND wa_objectlinks TO it_objectlinks.
            CLEAR: wa_objectlinks, v_objkey.

            CALL FUNCTION 'BAPI_DOCUMENT_CREATE2'
              EXPORTING
                documentdata   = ls_documentdata
              IMPORTING
                documentnumber = v_documentnumber
                return         = wa_return
              TABLES
                objectlinks    = it_objectlinks
                documentfiles  = it_files.
            IF wa_return-type NE 'E'.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = 'X'.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = v_documentnumber
                IMPORTING
                  output = v_documentnumber.
*              v_doknr = v_documentnumber.
*              v_doknr = |{ v_doknr ALPHA = OUT }|.

              UPDATE zdms_drf SET doknr = v_documentnumber
                                  dokar = ls_documentdata-documenttype
                                  dokvr = ls_documentdata-documentversion
                                  doktl = ls_documentdata-documentpart
                              WHERE drn_no = gs_outtab-drn_no.
              IF sy-subrc EQ 0.
                COMMIT WORK.
                gv_dms = 'X'.
              ENDIF.
              LOOP AT gt_outtab ASSIGNING <gs_outtab>.
                <gs_outtab>-doknr = v_documentnumber.
                <gs_outtab>-dokar = ls_documentdata-documenttype.
                <gs_outtab>-dokvr = ls_documentdata-documentversion.
                <gs_outtab>-doktl = ls_documentdata-documentpart.
              ENDLOOP.
*            refresh_grid( g_grid ).
              MESSAGE 'DMS Created Successfully' TYPE 'I'
              DISPLAY LIKE 'S'.
              cl_gui_cfw=>flush( ).
              refresh_grid( g_grid ).
              LEAVE TO SCREEN '102'.
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*            wa_out1-remarks = wa_return-message.
            ENDIF.
          ENDIF.
        ELSEIF NOT v_doknr EQ 0.
          v_doknr = |{ v_doknr ALPHA = IN }|.
          " allowing up to 255 chars
          CALL FUNCTION 'TMP_GUI_FILE_OPEN_DIALOG'
            EXPORTING
              window_title = 'File Upload'
*             DEFAULT_EXTENSION       =
*             DEFAULT_FILENAME        =
*             FILE_FILTER  =
*             INIT_DIRECTORY          =
*             MULTISELECTION          =
*         IMPORTING
*             RC           =
            TABLES
              file_table   = lt_file_table
            EXCEPTIONS
              cntl_error   = 1
              OTHERS       = 2.
          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_file_table INTO ls_file_table INDEX 1.
            IF sy-subrc EQ 0.
              file_name = ls_file_table-pathname.
            ENDIF.
          ENDIF.
          IF NOT file_name IS INITIAL.

            CALL FUNCTION 'CV120_DOC_GET_APPL'
              EXPORTING
*               PF_DIALOG =
*               PF_DISPLAY       =
                pf_file   = file_name
*               PF_TYPDT  =
              IMPORTING
                pfx_dappl = v_wsappl "type TDWE-TYPDT
              TABLES
                ptx_tdwp  = lt_tdwp.

            ls_files-storagecategory = 'ZFI'. "'DMS_C1_ST'.
            ls_files-docfile         = file_name.
            ls_files-wsapplication   = v_wsappl. "'TXT'.
            APPEND ls_files TO it_files.
            CLEAR: ls_files, v_wsappl.

            v_documenttype  = 'ZFI'.
            v_documentversion = '00'.
            v_documentpart     = '000'.
            v_documentnum     = v_doknr.

            REFRESH it_objectlinks.
*            CLEAR wa_objectlinks.
*            wa_objectlinks-objecttype = 'BKPF'.
*            wa_objectlinks-objectkey  = v_objkey.
*            APPEND wa_objectlinks TO it_objectlinks.
            CLEAR: wa_objectlinks, v_objkey.

            CALL FUNCTION 'BAPI_DOCUMENT_CHANGE2'
              EXPORTING
                documenttype    = v_documenttype
                documentnumber  = v_documentnum
                documentpart    = v_documentpart
                documentversion = v_documentversion
                documentdata    = v_documentdata
                documentdatax   = v_documentdatax
              IMPORTING
                return          = wa_return
              TABLES
                objectlinks     = it_objectlinks
                documentfiles   = it_files.
            IF wa_return-type NE 'E'.
              CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
                EXPORTING
                  wait = 'X'.
              CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
                EXPORTING
                  input  = v_documentnum
                IMPORTING
                  output = v_documentnum.
              CLEAR: it_files, it_objectlinks, wa_return.
*            refresh_grid( g_grid ).
            ELSE.
              CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*            wa_out1-remarks = wa_return-message.
            ENDIF.
          ENDIF.

        ENDIF.
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD handle_top_of_page.
    DATA : text(255).
    DATA : l_ltx TYPE t247-ltx.
    DATA : l_type(10) TYPE c.
    DATA c_area TYPE REF TO cl_dd_area.
    CLEAR text.
*

    CALL METHOD e_dyndoc_id->vertical_split
      EXPORTING
        split_area  = e_dyndoc_id
        split_width = '50%'
      IMPORTING
        right_area  = c_area.

*    CONCATENATE 'INPUT - OUTPUT RATIO FOR'  '-'  INTO text SEPARATED BY space.

    CALL METHOD e_dyndoc_id->add_picture
      EXPORTING
        picture_id = 'STANFORD_LOGO'.

    CALL METHOD e_dyndoc_id->display_document
      EXPORTING
        parent = obj_split->top_left_container.


  ENDMETHOD.
  METHOD handle_data_changed.
    DATA: ls_good TYPE lvc_s_modi.
    DATA: lrs_good TYPE lvc_s_modi.
    UNASSIGN <gs_outtab>.
    LOOP AT er_data_changed->mt_good_cells INTO ls_good.
      READ TABLE gt_outtab
               ASSIGNING <gs_outtab> INDEX ls_good-row_id.
      IF <gs_outtab> IS ASSIGNED.
        IF gv_ucomm = 'ZDMS1' ."AND pr_req EQ 'X'.
          CASE ls_good-fieldname.
            WHEN 'TITLE'.
              CALL METHOD er_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good-row_id
                  i_fieldname = ls_good-fieldname
                IMPORTING
                  e_value     = <gs_outtab>-title.
            WHEN 'FORMAT_NO'.
              CALL METHOD er_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good-row_id
                  i_fieldname = ls_good-fieldname
                IMPORTING
                  e_value     = <gs_outtab>-format_no.

              SELECT format_no FROM zdms_format
                     INTO @DATA(ls_format)
                     UP TO 1 ROWS
                     WHERE format_no = @<gs_outtab>-format_no.
              ENDSELECT.
              IF sy-subrc NE 0.
                MESSAGE e208(00) WITH 'No values found' INTO DATA(lv_msg).
                er_data_changed->add_protocol_entry(
                       EXPORTING
                         i_msgid = sy-msgid
                         i_msgno = sy-msgno
                         i_msgty = sy-msgty
                         i_msgv1 = lv_msg
                         i_fieldname = 'FORMAT_NO'
                         i_row_id = ls_good-row_id
                ).
              ENDIF.
            WHEN 'BOOK_NM'.
              CALL METHOD er_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good-row_id
                  i_fieldname = ls_good-fieldname
                IMPORTING
                  e_value     = <gs_outtab>-book_nm.
            WHEN 'NO_COPIES'.
              CALL METHOD er_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good-row_id
                  i_fieldname = ls_good-fieldname
                IMPORTING
                  e_value     = <gs_outtab>-no_copies.
            WHEN 'REQ_REASON'.
              CALL METHOD er_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good-row_id
                  i_fieldname = ls_good-fieldname
                IMPORTING
                  e_value     = <gs_outtab>-req_reason.
            WHEN 'REQ_BY'.
              CALL METHOD er_data_changed->get_cell_value
                EXPORTING
                  i_row_id    = ls_good-row_id
                  i_fieldname = ls_good-fieldname
                IMPORTING
                  e_value     = <gs_outtab>-req_by.
              IF <gs_outtab>-req_by NE sy-uname.
*                IF sy-subrc NE 0.
                MESSAGE e208(00) WITH 'Requested by should match with current user id' INTO lv_msg.
                er_data_changed->add_protocol_entry(
                       EXPORTING
                         i_msgid = sy-msgid
                         i_msgno = sy-msgno
                         i_msgty = sy-msgty
                         i_msgv1 = lv_msg
                         i_fieldname = 'REQ_BY'
                         i_row_id = ls_good-row_id
                ).
*              ENDIF.
              ENDIF.
              <gs_outtab>-req_dt = sy-datum.
*              lrs_good-fieldname = 'REQ_BY'.
          ENDCASE.
        ENDIF.
      ENDIF.
    ENDLOOP.
    IF NOT gt_outtab IS INITIAL.
      IF NOT g_grid IS INITIAL.
        refresh_grid( g_grid ).
*        g_grid->refresh_table_display( ).
      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD handle_on_f4.
    DATA lt_ret TYPE TABLE OF ddshretval.
    DATA ls_ret TYPE ddshretval.
    DATA lr_deptid TYPE RANGE OF zdms_deptid.
    DATA ls_deptid LIKE LINE OF lr_deptid.

*    CLEAR gs_outtab.
*    READ TABLE gt_outtab INTO gs_outtab INDEX  es_row_no-row_id.
    IF NOT frm_dept IS INITIAL.
      ls_deptid-sign = 'I'.
      ls_deptid-option = 'EQ'.
      ls_deptid-low = frm_dept .
      APPEND ls_deptid TO lr_deptid.
    ENDIF.
    CASE e_fieldname.
      WHEN 'FORMAT_NO'.
        SELECT format_no FROM zdms_format
                         INTO TABLE @DATA(lt_format).

        CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
          EXPORTING
            retfield   = 'FORMAT_NO'
*           PVALKEY    = ' '
            dynpprog   = sy-cprog
            dynpnr     = sy-dynnr
            value_org  = 'S'
          TABLES
            value_tab  = lt_format
            return_tab = lt_ret.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ELSE.
          READ TABLE lt_ret INTO ls_ret INDEX 1.
          IF sy-subrc EQ 0.
            UNASSIGN <gs_outtab>.
            READ TABLE gt_outtab ASSIGNING <gs_outtab> INDEX es_row_no-row_id.
            IF sy-subrc EQ 0.
              IF <gs_outtab> IS ASSIGNED.
                <gs_outtab>-format_no = ls_ret-fieldval.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN 'REQ_BY'.
        SELECT req_by
               FROM zdms_dept
               INTO TABLE @DATA(lt_deptv)
               WHERE dept_id IN @lr_deptid[].
        IF sy-subrc EQ 0.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              retfield        = 'REQ_BY'
              dynpprog        = sy-cprog
              dynpnr          = sy-dynnr
              value_org       = 'S'
            TABLES
              value_tab       = lt_deptv[] "F4 value list table
              return_tab      = lt_ret[]  "user selected table
            EXCEPTIONS
              parameter_error = 1
              no_values_found = 2
              OTHERS          = 3.

          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_ret INTO ls_ret INDEX 1.
            IF sy-subrc EQ 0.
              UNASSIGN <gs_outtab>.
              READ TABLE gt_outtab ASSIGNING <gs_outtab> INDEX es_row_no-row_id.
              IF sy-subrc EQ 0.
                IF <gs_outtab> IS ASSIGNED.
                  <gs_outtab>-req_by = ls_ret-fieldval.
                  <gs_outtab>-req_dt = sy-datum.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN 'APR_BY'.
        SELECT dept_id, req_by, apr_by
       FROM zdms_dept
       INTO TABLE @DATA(lt_deptv_apr)
       WHERE dept_id IN @lr_deptid[].
        IF sy-subrc EQ 0.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              retfield        = 'APR_BY'
              dynpprog        = sy-cprog
              dynpnr          = sy-dynnr
              value_org       = 'S'
            TABLES
              value_tab       = lt_deptv_apr[] "F4 value list table
              return_tab      = lt_ret[]  "user selected table
            EXCEPTIONS
              parameter_error = 1
              no_values_found = 2
              OTHERS          = 3.

          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_ret INTO ls_ret INDEX 1.
            IF sy-subrc EQ 0.
              UNASSIGN <gs_outtab>.
              READ TABLE gt_outtab ASSIGNING <gs_outtab> INDEX es_row_no-row_id.
              IF sy-subrc EQ 0.
                IF <gs_outtab> IS ASSIGNED.
                  <gs_outtab>-apr_by = ls_ret-fieldval.
                  <gs_outtab>-apr_dt = sy-datum.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN 'ISS_BY'.
        SELECT dept_id, req_by, iss_by
       FROM zdms_dept
       INTO TABLE @DATA(lt_deptv_iss)
       WHERE dept_id IN @lr_deptid[].
        IF sy-subrc EQ 0.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              retfield        = 'ISS_BY'
              dynpprog        = sy-cprog
              dynpnr          = sy-dynnr
              value_org       = 'S'
            TABLES
              value_tab       = lt_deptv_iss[] "F4 value list table
              return_tab      = lt_ret[]  "user selected table
            EXCEPTIONS
              parameter_error = 1
              no_values_found = 2
              OTHERS          = 3.

          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_ret INTO ls_ret INDEX 1.
            IF sy-subrc EQ 0.
              UNASSIGN <gs_outtab>.
              READ TABLE gt_outtab ASSIGNING <gs_outtab> INDEX es_row_no-row_id.
              IF sy-subrc EQ 0.
                IF <gs_outtab> IS ASSIGNED.
                  <gs_outtab>-iss_by = ls_ret-fieldval.
                  <gs_outtab>-iss_dt = sy-datum.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN 'REC_BY'.
        SELECT dept_id, req_by, rec_by
       FROM zdms_dept
       INTO TABLE @DATA(lt_deptv_res)
       WHERE dept_id IN @lr_deptid[].
        IF sy-subrc EQ 0.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              retfield        = 'REC_BY'
              dynpprog        = sy-cprog
              dynpnr          = sy-dynnr
              value_org       = 'S'
            TABLES
              value_tab       = lt_deptv_res[] "F4 value list table
              return_tab      = lt_ret[]  "user selected table
            EXCEPTIONS
              parameter_error = 1
              no_values_found = 2
              OTHERS          = 3.

          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_ret INTO ls_ret INDEX 1.
            IF sy-subrc EQ 0.
              UNASSIGN <gs_outtab>.
              READ TABLE gt_outtab ASSIGNING <gs_outtab> INDEX es_row_no-row_id.
              IF sy-subrc EQ 0.
                IF <gs_outtab> IS ASSIGNED.
                  <gs_outtab>-rec_by = ls_ret-fieldval.
                  <gs_outtab>-rec_dt = sy-datum.
*            PERFORM refresh_alv USING g_grid.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
      WHEN 'REQ_REASON'.
        SELECT reason_cd, reason_desc
             FROM zdms_reason
             INTO TABLE @DATA(lt_dms_reason).
*             WHERE dept_id = @from_dept.
        IF sy-subrc EQ 0.
          CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
            EXPORTING
              retfield        = 'REQ_REASON'
              dynpprog        = sy-cprog
              dynpnr          = sy-dynnr
              value_org       = 'S'
            TABLES
              value_tab       = lt_dms_reason[] "F4 value list table
              return_tab      = lt_ret[]  "user selected table
            EXCEPTIONS
              parameter_error = 1
              no_values_found = 2
              OTHERS          = 3.

          IF sy-subrc <> 0.
* Implement suitable error handling here
          ELSE.
            READ TABLE lt_ret INTO ls_ret INDEX 1.
            IF sy-subrc EQ 0.
              UNASSIGN <gs_outtab>.
              READ TABLE gt_outtab ASSIGNING <gs_outtab> INDEX es_row_no-row_id.
              IF sy-subrc EQ 0.
                IF <gs_outtab> IS ASSIGNED.
                  <gs_outtab>-req_reason = ls_ret-fieldval.
*            PERFORM refresh_alv USING g_grid.
                ENDIF.
              ENDIF.
            ENDIF.
          ENDIF.
        ENDIF.
    ENDCASE.
    refresh_grid( g_grid ).
  ENDMETHOD.
  METHOD refresh_grid.
    IF lo_grid IS BOUND.
      DATA: li_rows    TYPE lvc_s_roid,
            li_col     TYPE lvc_s_col,
            lws_row_id TYPE lvc_s_roid,
            lws_col_id TYPE lvc_s_col,
            ls_col     TYPE lvc_s_col,
            ls_num     TYPE lvc_s_roid.

* Get the latest field position
      CALL METHOD lo_grid->get_current_cell
        IMPORTING
          es_col_id = li_col
          es_row_no = li_rows.

      CALL METHOD lo_grid->get_scroll_info_via_id
        IMPORTING
          es_col_info = ls_col
          es_row_no   = ls_num.

* refresh ALV
      CLEAR gs_stable.
      gs_stable-col = 'X'.
      gs_stable-row = 'X'.
      CALL METHOD lo_grid->refresh_table_display
        EXPORTING
          is_stable = gs_stable
        EXCEPTIONS
          finished  = 1
          OTHERS    = 2.
      IF sy-subrc = 0.
*   MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.

* Position back to the latest field
      CALL METHOD lo_grid->set_scroll_info_via_id
        EXPORTING
          is_col_info = ls_col
          is_row_no   = ls_num.

      lws_row_id-row_id    = li_rows-row_id.
      lws_col_id-fieldname = li_col-fieldname.

      CALL METHOD lo_grid->set_current_cell_via_id
        EXPORTING
          is_column_id = lws_col_id
          is_row_no    = lws_row_id.

    ENDIF.
  ENDMETHOD.
  METHOD handle_user_command.
    DATA lt_rowid TYPE lvc_t_row.
    DATA ls_rowid TYPE lvc_s_row.
    DATA lv_valid.
    DATA lt_fieldcat        TYPE lvc_t_fcat.
    DATA ls_fieldcat TYPE lvc_s_fcat.
    FIELD-SYMBOLS <ls_fieldcat> TYPE lvc_s_fcat..

    CASE e_ucomm.
      WHEN '&GET'.
        get_data_zdms2( ).
      WHEN '&ADD'.
        append_row( ).
      WHEN '&DMS'.
        upload_dms( ).
      WHEN '&DMSD'.
        dms_show( ).
      WHEN '&DELE'.
        g_grid->get_selected_rows( IMPORTING et_index_rows = lt_rowid ).
        LOOP AT lt_rowid INTO ls_rowid.
          DELETE gt_outtab INDEX ls_rowid-index.
        ENDLOOP.
        IF sy-subrc EQ 0.
          LOOP AT gt_outtab ASSIGNING <gs_outtab>.
            <gs_outtab>-srno = sy-tabix.
          ENDLOOP.
        ENDIF.
        refresh_grid( g_grid ).
      WHEN '&SVAE'.
        IF NOT g_grid IS INITIAL.
          CALL METHOD g_grid->check_changed_data( IMPORTING e_valid = lv_valid ).
          IF lv_valid EQ 'X'.
            duplicate_validate( ).
            update( ).
            cl_gui_cfw=>flush( ).
            g_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = lt_fieldcat ).
            IF lv_flag IS INITIAL.
              LOOP AT lt_fieldcat ASSIGNING <ls_fieldcat> ."WITH KEY fieldname = 'APR_BY'.
*            IF sy-subrc EQ 0.
                IF <ls_fieldcat>-fieldname = 'TITLE' OR
                  <ls_fieldcat>-fieldname = 'BOOK_NM' OR
                  <ls_fieldcat>-fieldname = 'NO_COPIES' OR
                  <ls_fieldcat>-fieldname = 'REQ_REASON' OR
                  <ls_fieldcat>-fieldname = 'REQ_BY' OR
                  <ls_fieldcat>-fieldname = 'FORMAT_NO' ."
                  <ls_fieldcat>-edit = ' '.
                ENDIF.
              ENDLOOP.
            ENDIF.

            g_grid->set_frontend_fieldcatalog(  EXPORTING it_fieldcatalog = lt_fieldcat ).
*            ENDIF.
*            PERFORM build_fieldcat CHANGING gt_fieldcat.
*            g_grid->set_frontend_fieldcatalog(  EXPORTING it_fieldcatalog = gt_fieldcat ).
*            cl_gui_cfw=>flush( ).
          ENDIF.
        ENDIF.
    ENDCASE.
    refresh_grid( g_grid ).
  ENDMETHOD.
  METHOD duplicate_validate.
    DATA lt_outtab TYPE TABLE OF gty_outtab.
    lt_outtab = gt_outtab.
*    READ TABLE gt_outtab into ls_outtab index 1.

  ENDMETHOD.
  METHOD get_data_zdms2.
*    DATA lr_reqby TYPE RANGE OF zdms-req_by
*         WITH HEADER LINE.
*    DATA lr_reqdt TYPE RANGE OF zdms-req_dt WITH HEADER LINE.
    DATA lr_from_dept TYPE RANGE OF zdms_drf-from_dept . "WITH HEADER LINE.
    DATA ls_from_dept LIKE LINE OF lr_from_dept. "
    DATA lr_to_dept TYPE RANGE OF zdms_drf-to_dept. " WITH HEADER LINE.
    DATA ls_to_dept LIKE LINE OF lr_to_dept. "
    DATA lt_return TYPE TABLE OF ddshretval .
    IF NOT frm_dept IS INITIAL.
      ls_from_dept-sign = 'I'.
      ls_from_dept-option = 'EQ'.
      ls_from_dept-low = frm_dept.
      APPEND ls_from_dept TO lr_from_dept.
    ENDIF.

    IF NOT to_dept IS INITIAL.
      ls_to_dept-sign = 'I'.
      ls_to_dept-option = 'EQ'.
      ls_to_dept-low = to_dept.
      APPEND ls_to_dept TO lr_to_dept.
    ENDIF.
    REFRESH gt_zdmsdrf.
    SELECT * FROM zdms_drf
         INTO TABLE gt_zdmsdrf
         WHERE "drn_no IN s_drnno[] AND
               from_dept IN lr_from_dept AND
               to_dept IN lr_to_dept ."AND
    "req_by IN s_reqby[] AND
    "req_dt IN s_rdate[].
    IF sy-subrc NE 0.
      MESSAGE 'No data found' TYPE 'I'.
      LEAVE LIST-PROCESSING.
*      APPEND INITIAL LINE TO gt_outtab.
    ELSE.
*      APPEND INITIAL LINE TO gt_outtab.
      LOOP AT gt_zdmsdrf INTO gs_zdmsdrf.
        CLEAR gs_outtab.
        gs_outtab-srno        = gs_zdmsdrf-sr_no .
        gs_outtab-title       = gs_zdmsdrf-title .
        gs_outtab-format_no   = gs_zdmsdrf-format_no .
        gs_outtab-book_nm     = gs_zdmsdrf-book_nm   .
        gs_outtab-no_copies   = gs_zdmsdrf-no_copies .
        gs_outtab-req_reason  = gs_zdmsdrf-req_reason.
        gs_outtab-req_by      = gs_zdmsdrf-req_by    .
        gs_outtab-req_dt      = gs_zdmsdrf-req_dt    .
        gs_outtab-apr_by      = gs_zdmsdrf-apr_by    .
        gs_outtab-apr_dt      = gs_zdmsdrf-apr_dt    .
        gs_outtab-iss_by      = gs_zdmsdrf-iss_by.
        gs_outtab-iss_dt      = gs_zdmsdrf-iss_dt.
        gs_outtab-drn_no         = gs_zdmsdrf-drn_no.
        APPEND gs_outtab TO gt_outtab.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.
  METHOD update.
    DATA lv_sno TYPE char10.
    DATA lv_fname TYPE lvc_fname.
    DATA lv_msg TYPE char90.
    DATA lv_drnno TYPE zdms_drnno.
    DATA lv_datum TYPE sydatum.
    DATA lv_reqby TYPE syuname.
    DATA lv_curid TYPE syuname.
    CLEAR gs_outtab.
    REFRESH gt_zdmsdrf.
    IF gv_ucomm = 'ZDMS1'.
*      IF pr_req EQ 'X'.
      CLEAR lv_flag .
      LOOP AT gt_outtab INTO gs_outtab.
        IF gs_outtab-title IS INITIAL OR
         gs_outtab-format_no IS INITIAL OR
         gs_outtab-book_nm IS INITIAL OR
         gs_outtab-no_copies IS INITIAL OR
         gs_outtab-req_reason IS INITIAL OR
         gs_outtab-req_by IS INITIAL OR
*      endif.
          lv_sno = gs_outtab-srno..
*      IF me->lo_alv_changed IS BOUND.
          lv_flag = 'X'.
          EXIT.

*      ENDIF.
        ENDIF.
      ENDLOOP.
      IF sy-subrc EQ 0 AND lv_flag IS INITIAL.
        CLEAR lv_drnno.
        SELECT MAX( drn_no ) FROM zdms_drf
               INTO lv_drnno .
        IF lv_drnno IS INITIAL.
          lv_drnno = '1'.
        ELSE.
          lv_drnno = lv_drnno + 1.
        ENDIF.
*      lv_datum = sy-datum.
        LOOP AT gt_outtab ASSIGNING <gs_outtab>.
          <gs_outtab>-drn_no = lv_drnno.
          CLEAR gs_zdmsdrf.
          gs_zdmsdrf-drn_no  = lv_drnno.
          gs_zdmsdrf-sr_no   = gs_outtab-srno.
          gs_zdmsdrf-title   = gs_outtab-title.
          gs_zdmsdrf-from_dept = frm_dept.
          gs_zdmsdrf-to_dept = to_dept.
          gs_zdmsdrf-format_no = gs_outtab-format_no.
          gs_zdmsdrf-book_nm = gs_outtab-book_nm.
          gs_zdmsdrf-no_copies = gs_outtab-no_copies.
          gs_zdmsdrf-req_reason = gs_outtab-req_reason.
          gs_zdmsdrf-req_by = gs_outtab-req_by.
          gs_zdmsdrf-req_dt = gs_outtab-req_dt.
          gs_zdmsdrf-erdat = sy-datum.
          gs_zdmsdrf-ernam = sy-uname.
          CLEAR : lv_curid,
                  lv_reqby.
          lv_reqby = gs_outtab-req_by.
          lv_curid = sy-uname.
          TRANSLATE lv_reqby TO UPPER CASE.
          TRANSLATE lv_curid TO UPPER CASE.

          IF lv_reqby NE lv_curid.
            lv_flag = 'X'.
            EXIT.
          ENDIF.
*        gs_zdms-REQ_DT = gs_outtab-req_dt.
          APPEND gs_zdmsdrf TO gt_zdmsdrf.
        ENDLOOP.
        IF lv_flag EQ 'X'.
          MESSAGE 'Requested by should match with current userid' TYPE 'I'
          DISPLAY LIKE 'E'.
          LEAVE TO SCREEN '102'.
        ENDIF.

        IF NOT gt_zdmsdrf IS INITIAL.
          MODIFY zdms_drf FROM TABLE gt_zdmsdrf.
          IF sy-subrc EQ 0.
            gv_update = 'X'.
            WRITE lv_drnno TO lv_drnno.
            CONCATENATE lv_drnno '-DRNNo generated successfully' INTO DATA(lv_message).
            MESSAGE lv_message TYPE 'I' DISPLAY LIKE 'S'.
          ENDIF.
        ENDIF.
      ELSEIF lv_flag EQ 'X'.
        MESSAGE i001(00) WITH 'line no-'  gs_outtab-srno '-inputs are mandatory'
        DISPLAY LIKE 'E'."INTO lv_msg.
        LEAVE TO SCREEN '102'..

      ENDIF.
*      ELSEIF pr_rec EQ 'X'.
*        LOOP AT gt_zdmsdrf ASSIGNING <gs_zdmsdrf>.
*          READ TABLE gt_outtab INTO gs_outtab
*               WITH KEY drn_no = <gs_zdmsdrf>-drn_no
*                        srno = <gs_zdmsdrf>-sr_no.
*          IF sy-subrc EQ 0.
*            IF <gs_zdmsdrf>-rec_by ne sy-uname.
*              CONCATENATE gs_outtab-srno gs_outtab-drn_no INTO lv_msg
*              SEPARATED BY '/'.
*              MESSAGE s001(00) WITH 'line no-'  lv_msg '-Login System user & selected user not Matched' ."INTO lv_msg.
*              LEAVE LIST-PROCESSING.
*            ENDIF.
*            <gs_zdmsdrf>-rec_by = gs_outtab-rec_by.
*            <gs_zdmsdrf>-rec_dt = gs_outtab-rec_dt.
*          ENDIF.
*        ENDLOOP.
*        IF NOT gt_zdmsdrf IS INITIAL.
*          MODIFY zdms_drf FROM TABLE gt_zdmsdrf.
*          IF sy-subrc EQ 0.
*            CONCATENATE lv_drnno '-DRNNo updated successfully' INTO lv_message.
*            MESSAGE lv_message TYPE 'S'.
*          ENDIF.
*        ENDIF.
*      ENDIF.
    ENDIF.
  ENDMETHOD.
  METHOD append_row.
    DATA lv_index TYPE sytabix.
    lv_index = lines( gt_outtab ).
    IF lv_index IS INITIAL.
      lv_index = lv_index + 1.
      gs_outtab-srno = lv_index.
      APPEND gs_outtab TO gt_outtab.
    ELSE.
      CLEAR gs_outtab.
      gs_outtab-srno = lv_index + 1.
      APPEND gs_outtab TO gt_outtab.
    ENDIF.
  ENDMETHOD.
  METHOD handle_toolbar.
    DATA : is_btn TYPE stb_button.
    IF gv_ucomm = 'ZDMS1'.
*      IF pr_req = 'X'.
      IF gv_update IS INITIAL.
        is_btn-function = '&ADD'.
        is_btn-text = 'Create New Request'.
        is_btn-quickinfo = 'Add Empty Row'.
        is_btn-disabled = ''.
        APPEND is_btn TO e_object->mt_toolbar.
        CLEAR is_btn.

*      CLEAR is_btn.
        is_btn-function = '&DELE'.
        is_btn-text = 'Delete Records'.
        is_btn-quickinfo = 'Delete Records'.
        is_btn-disabled = ''.
        APPEND is_btn TO e_object->mt_toolbar.
        CLEAR is_btn.
*      ENDIF.
*    ENDIF.
        is_btn-function = '&SVAE'.
        is_btn-text = 'SAVE'.
        is_btn-quickinfo = 'Save in DB'.
        is_btn-disabled = ''.
        APPEND is_btn TO e_object->mt_toolbar.
        CLEAR is_btn.
      ELSEIF gv_update = 'X' AND gv_dms IS INITIAL.
        CLEAR is_btn.
        is_btn-function = '&DMS'.
        is_btn-text = 'DMS Upload'.
        is_btn-quickinfo = 'DMS Upload'.
        is_btn-disabled = ''.
        APPEND is_btn TO e_object->mt_toolbar.
        CLEAR is_btn.
      ELSEIF gv_dms = 'X'.
        CLEAR is_btn.
        is_btn-function = '&DMSD'.
        is_btn-text = 'DMS Display'.
        is_btn-quickinfo = 'DMS Display'.
        is_btn-disabled = ''.
        APPEND is_btn TO e_object->mt_toolbar.
        CLEAR is_btn.
      ENDIF.
*      ELSEIF pr_rec EQ 'X'.
*        CLEAR is_btn.
*        is_btn-function = '&GET'.
**    is_btn-icon = icon_system_save.
*        is_btn-text = 'GET'.
*        is_btn-quickinfo = 'GET Data'.
*        is_btn-disabled = ''.
*        APPEND is_btn TO e_object->mt_toolbar.
*        CLEAR is_btn.
*
*        is_btn-function = '&SVAE'.
*        is_btn-text = 'SAVE'.
*        is_btn-quickinfo = 'Save in DB'.
*        is_btn-disabled = ''.
*        APPEND is_btn TO e_object->mt_toolbar.
*        CLEAR is_btn.
*      ENDIF.
    ENDIF.
  ENDMETHOD.
ENDCLASS.
_________________________________________________________
_________________________________________________________

_________________________________________________________
_________________________________________________________
*&---------------------------------------------------------------------*
*&  Include           ZDMS_DRF_REQ_SUB
*&---------------------------------------------------------------------*
*&---------------------------------------------------------------------*
*&      Form  F4_HELP
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0055   text
*----------------------------------------------------------------------*
FORM f4_help  USING    VALUE(p_0055) TYPE help_info-dynprofld.
  TYPES : BEGIN OF lty_dept,
            dept_id TYPE zdms_deptid,
          END OF lty_dept.
  DATA lt_dept TYPE  TABLE OF lty_dept.
  DATA lt_return TYPE TABLE OF  ddshretval.
  REFRESH lt_dept.
  SELECT dept_id FROM zdms_dept
         INTO TABLE lt_dept.
  IF NOT lt_dept IS INITIAL.
    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
      EXPORTING
        retfield    = 'DEPT_NAME'
        dynpprog    = sy-cprog
        dynpnr      = sy-dynnr
        dynprofield = p_0055
        value_org   = 'S'
      TABLES
        value_tab   = lt_dept
        return_tab  = lt_return.
  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  MODIFY_SCREEN
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM modify_screen .
  LOOP AT SCREEN.
    IF gv_ucomm = 'ZDMS1'.
*      IF pr_req EQ 'X'.
      IF screen-group1 = 'RE2'. "or
        "screen-group1 = 'RE3'.
        screen-input = 1.
      ELSEIF screen-name = 'P_DATE'.
        screen-input = 0.
      ELSEIF screen-group1 = 'RE3'.
        screen-input = 0.
*          ENDIF.
      ELSEIF screen-group1 = 'RC1' OR
        screen-group1 = 'RC2' OR
        screen-group1 = 'RC3' OR
        screen-group1 = 'RC4' OR
        screen-group1 = 'RC5'.
        screen-active = 0.
        screen-invisible = 1.
      ENDIF.
*      ELSEIF pr_rec EQ 'X'.
*        IF screen-group1 = 'RE1'." OR
*
*          screen-active = 0.
*          screen-invisible = 1.
*        ELSEIF screen-group1 = 'RC1' OR
*           screen-group1 = 'RC2' OR
*           screen-group1 = 'RE2' OR
*           screen-group1 = 'RE3' OR
*           screen-group1 = 'RC3' OR
*           screen-group1 = 'RC4' OR
*           screen-group1 = 'RC5'.
*          screen-active = 1.
*        ENDIF.
*      ENDIF.
    ENDIF.
*    ELSEIF gv_ucomm = 'ZDMS2'.
*      IF screen-group1 = 'RC1' OR
*         screen-group1 = 'RC2' OR
*         screen-group1 = 'RE2' OR
*         screen-group1 = 'RE3' OR
*         screen-group1 = 'RC3' OR
*         screen-name  = 'PR_REQ' OR
*         screen-name  = 'PR_REC'.
*        screen-active = 1.
*      ELSEIF screen-group1 = 'RE1' OR
*             screen-group1 = 'RC4' OR
*             screen-group1 = 'RC5' ."OR
*        .
*        screen-active = 0.
*        screen-invisible = 1.
*      ENDIF.
*    ENDIF.
    MODIFY SCREEN.
  ENDLOOP.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0102  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0102 OUTPUT.
  SET PF-STATUS 'ZDMS_102'.
  SET TITLEBAR 'ZDMS_RE'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  CREATE_ALV  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE create_alv OUTPUT.
  g_container = 'ZDMS1'.
  IF gv_ucomm IS INITIAL.
    gv_ucomm = 'ZDMS1'.
  ENDIF.
*  IF g_custom_container IS INITIAL.
  IF g_grid IS INITIAL.
**    APPEND INITIAL LINE TO gt_outtab[].
    PERFORM create_and_init_alv CHANGING gt_outtab[]
                                         gt_fieldcat.

  ELSE.
    IF g_grid IS BOUND.
      cl_gui_cfw=>flush( ).
      PERFORM build_fieldcat CHANGING gt_fieldcat.
      PERFORM refresh_alv USING g_grid.
    ENDIF.
  ENDIF.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  CREATE_AND_INIT_ALV
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      <--P_GT_OUTTAB[]  text
*      <--P_GT_FIELDCAT  text
*----------------------------------------------------------------------*
FORM create_and_init_alv CHANGING pt_outtab LIKE gt_outtab[]
                                  pt_fieldcat TYPE lvc_t_fcat.
  DATA: lt_exclude TYPE ui_functions.
*  IF g_custom_container IS INITIAL.
  IF g_grid IS INITIAL.
    TRY.
        CREATE OBJECT obj_dock
          EXPORTING
            repid     = sy-repid
            dynnr     = '0102'
            side      = obj_dock->dock_at_left
            extension = 1600
            lifetime  = obj_dock->lifetime_default.

        CREATE OBJECT obj_split
          EXPORTING
            link_dynnr    = '0102'
            link_repid    = sy-repid
*           metric        = cntl_metric_dynpro
            parent        = obj_dock
            orientation   = 0
            sash_position = 20
            with_border   = 0.

        o_top_container = obj_split->top_left_container.

        o_bottom_container = obj_split->bottom_right_container.

        CREATE OBJECT g_grid
          EXPORTING
            i_parent = o_bottom_container.
        PERFORM build_fieldcat CHANGING pt_fieldcat.
*
        PERFORM exclude_tb_functions CHANGING lt_exclude.
*
*        "Drop Down
        PERFORM set_dropdown .
        g_grid->set_drop_down_table( EXPORTING it_drop_down = gt_dropdown ).
*
*
*        "F4 help
        " insert the data in ASC order only else give dump in runtime.
*        CLEAR gs_fields_f4.
        gs_fields_f4-fieldname = 'APR_BY'.
        gs_fields_f4-register = 'X'.
        APPEND gs_fields_f4 TO gt_fields_f4.

        CLEAR gs_fields_f4.
        gs_fields_f4-fieldname = 'ISS_BY'.
        gs_fields_f4-register = 'X'.
        APPEND gs_fields_f4 TO gt_fields_f4.

        REFRESH gt_fields_f4.
        CLEAR gs_fields_f4.
        gs_fields_f4-fieldname = 'FORMAT_NO'.
        gs_fields_f4-register = 'X'.
        APPEND gs_fields_f4 TO gt_fields_f4.

        CLEAR gs_fields_f4.
        gs_fields_f4-fieldname = 'REC_BY'.
        gs_fields_f4-register = 'X'.
        APPEND gs_fields_f4 TO gt_fields_f4.

        CLEAR gs_fields_f4.
        gs_fields_f4-fieldname = 'REQ_BY'.
        gs_fields_f4-register = 'X'.
        APPEND gs_fields_f4 TO gt_fields_f4.



        CLEAR gs_fields_f4.
        gs_fields_f4-fieldname = 'REQ_REASON'.
        gs_fields_f4-register = 'X'.
        APPEND gs_fields_f4 TO gt_fields_f4.
        g_grid->register_f4_for_fields(
                  EXPORTING it_f4 = gt_fields_f4 ).
*
*        "layout
*        gs_layout-stylefname = 'CELLTAB'.
*        gs_layout-sel_mode = 'A'.
*        gs_layout-cwidth_opt = 'X'.
**        g_grid->register_edit_event(
**         i_event_id = cl_gui_alv_grid=>mc_evt_modified ).
*
        CREATE OBJECT lo_zdmsdrf.
        IF NOT lo_zdmsdrf IS INITIAL.
*          SET HANDLER lo_zdmsdrf->handle_toolbar FOR g_grid.
          SET HANDLER lo_zdmsdrf->handle_toolbar FOR g_grid.
          SET HANDLER lo_zdmsdrf->handle_user_command FOR g_grid.
          SET HANDLER lo_zdmsdrf->handle_data_changed FOR g_grid.
          SET HANDLER lo_zdmsdrf->handle_on_f4 FOR g_grid.
          SET HANDLER lo_zdmsdrf->handle_top_of_page FOR g_grid.
        ENDIF.

        CREATE OBJECT dg_dyndoc_id.
        CALL METHOD dg_dyndoc_id->initialize_document.
        CALL METHOD g_grid->list_processing_events
          EXPORTING
            i_event_name = 'TOP_OF_PAGE'
            i_dyndoc_id  = dg_dyndoc_id.

        CALL METHOD g_grid->set_table_for_first_display
          EXPORTING
*           i_bypassing_buffer   = 'X'
            it_toolbar_excluding = lt_exclude
            is_layout            = gs_layout
          CHANGING
            it_fieldcatalog      = pt_fieldcat
            it_outtab            = gt_outtab[].
*
        g_grid->register_edit_event(
        i_event_id = cl_gui_alv_grid=>mc_evt_modified ).
*
      CATCH cx_root.

        MESSAGE 'Error in report' TYPE 'I'.
        LEAVE LIST-PROCESSING.
    ENDTRY.
  ELSE.
    IF g_grid IS BOUND.
      CLEAR gs_stable.
      gs_stable-col = 'X'.
      gs_stable-row = 'X'.
      CALL METHOD g_grid->refresh_table_display
        EXPORTING
          is_stable = gs_stable.
    ENDIF.
  ENDIF.
** set editable cells to ready for input initially
ENDFORM.

FORM build_fieldcat  CHANGING pt_fieldcat TYPE lvc_t_fcat.
*  PERFORM fcat USING 'fieldname' 'field desc' 'length' 'input' 'lowercase' 'nooutput'.
  REFRESH gt_fieldcat.
  IF gv_ucomm = 'ZDMS1'.
*    IF pr_req = 'X' AND gv_update IS INITIAL.
    PERFORM fcat  USING 'SRNO' 'S.No' '6' '' '' ''.
    PERFORM fcat  USING  'TITLE' 'Title          ' '55' 'X' 'X' '' .
    PERFORM fcat USING  'FORMAT_NO' 'Format_no' '20' 'X' 'X' ''.
    PERFORM fcat USING  'BOOK_NM' 'Book Name' '20' 'X' 'X' ''.
    PERFORM fcat USING  'NO_COPIES' 'No. Copies' '5' 'X' 'X' ''.
    PERFORM fcat USING  'REQ_REASON' 'Reason For Requirement' '25' 'X' 'X' ''.
    PERFORM fcat USING  'REQ_BY' 'Requested By' '12' 'X' 'X' ''.
    PERFORM fcat USING  'REQ_DT' 'Requested Dt' '10' '' '' ''.
    PERFORM fcat USING  'DRN_NO' 'DRN.No' '10' '' '' ''.
    PERFORM fcat USING  'APR_BY' 'Apprvd By' '15' '' '' 'X'.
**  PERFORM fcat USING  'APR_BY' 'Approved By'.                                                                          ,
*  PERFORM fcat USING  'APR_BY' 'Approved By'.                                                                          ,
    PERFORM fcat USING  'APR_DT' 'Approved Dt' '' '' '' 'X'.
    PERFORM fcat USING  'ISS_BY' 'Issued By' '' '' '' 'X'.
    PERFORM fcat USING  'ISS_DT' 'Issued Dt' '' '' '' 'X'.
    PERFORM fcat USING  'REC_BY' 'Recieved By' '' '' '' 'X'.
    PERFORM fcat USING  'REC_DT' 'Recieved Dt' '' '' '' 'X'.
    PERFORM fcat USING  'DOKNR' 'Document No' '' '' '' ''.



  ENDIF.
*  IF g_grid IS BOUND.
*    g_grid->set_frontend_fieldcatalog( EXPORTING it_fieldcatalog = pt_fieldcat ).
*  ENDIF.


ENDFORM.

FORM       fcat  USING fu_fname
                       fu_text
                       fu_len
                       fu_inp
                       fu_low
                       fu_noout.
*              CHANGING pt_fcat TYPE slis_t_fieldcat_alv.
  DATA : lt_fieldcat TYPE lvc_s_fcat.
  lt_fieldcat-fieldname      = fu_fname.  "field name
*  lt_fieldcat-selddictxt = fu_text.
*  lt_fieldcat-seltext      = fu_text.
  lt_fieldcat-scrtext_l = fu_text.
  lt_fieldcat-scrtext_m = fu_text.
  lt_fieldcat-scrtext_s = fu_text.
*  lt_fieldcat-reptext  = fu_text.
  lt_fieldcat-outputlen      = fu_len.  "text length
  lt_fieldcat-edit       = fu_inp.  "text length
  lt_fieldcat-lowercase      = fu_low.  "text length
*  lt_fieldcat-do_sum         = fu_sum.  "summing
*  lt_fieldcat-cfieldname     = fu_curr. "currency
*  lt_fieldcat-hotspot        = fu_spot.
  lt_fieldcat-no_out         = fu_noout.
*  lt_fieldcat-datatype        = 'NUMC'.

  IF fu_fname = 'FORMAT_NO'.
    lt_fieldcat-f4availabl = 'X'.
    lt_fieldcat-key_sel = 'X'.
  ELSEIF fu_fname = 'NO_COPIES'.
    lt_fieldcat-datatype        = 'NUMC'.
    lt_fieldcat-inttype         = 'N'.
  ELSEIF fu_fname = 'BOOK_NM'.
    lt_fieldcat-drdn_hndl = '1'.
    lt_fieldcat-key_sel = 'X'.
*       lt_fieldcat-drdn_field = 'BOOK_NM'.
  ELSEIF fu_fname = 'REQ_BY'.
    lt_fieldcat-f4availabl = 'X'.
  ELSEIF fu_fname = 'REC_BY'.
    lt_fieldcat-f4availabl = 'X'.
*    lt_fieldcat-key_sel = 'X'..
  ELSEIF fu_fname = 'REQ_REASON'.
    lt_fieldcat-f4availabl = 'X'.
  ELSEIF fu_fname = 'TITLE' OR
         fu_fname = 'REQ_REASON'.
*    lt_fieldcat-col_opt = 'X'.
  ENDIF.
  APPEND lt_fieldcat TO gt_fieldcat.
ENDFORM.

FORM exclude_tb_functions  CHANGING pt_exclude TYPE ui_functions.
  DATA ls_exclude TYPE ui_func.

  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_insert_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_undo.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_append_row.
  APPEND ls_exclude TO pt_exclude.
*  MC_FC_LOC_APPEND_ROW
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_copy.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_cut.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_delete_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_loc_paste_new_row.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_save_variant.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_current_variant.
  APPEND ls_exclude TO pt_exclude.
  ls_exclude = cl_gui_alv_grid=>mc_fc_graph.
  APPEND ls_exclude TO pt_exclude.

ENDFORM.
FORM refresh_alv  USING  g_grid TYPE REF TO cl_gui_alv_grid.
*  IF g_grid IS BOUND.
*    CLEAR gs_stable.
*    gs_stable-col = 'X'.
*    gs_stable-row = 'X'.
*    CALL METHOD g_grid->refresh_table_display
*      EXPORTING
*        is_stable = gs_stable.
*  ENDIF.
ENDFORM.

FORM set_dropdown .
  REFRESH gt_dropdown.
  CLEAR gs_dropdown.
  gs_dropdown-handle = '1'.
  gs_dropdown-value = 'Format'.
  APPEND gs_dropdown TO gt_dropdown.
  CLEAR gs_dropdown.

  gs_dropdown-handle = '1'.
  gs_dropdown-value = 'LogBook'.
  APPEND gs_dropdown TO gt_dropdown.
  CLEAR gs_dropdown.

  gs_dropdown-handle = '1'.
  gs_dropdown-value = 'WorkSheet'.
  APPEND gs_dropdown TO gt_dropdown.
  CLEAR gs_dropdown.

  gs_dropdown-handle = '1'.
  gs_dropdown-value = 'Register'.
  APPEND gs_dropdown TO gt_dropdown.
  CLEAR gs_dropdown.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0102  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0102 INPUT.
  CASE sy-ucomm.
    WHEN 'EXIT' OR
         'CANCEL' OR
         'BACK'.
      LEAVE PROGRAM.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  LOAD_PIC  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE load_pic OUTPUT.
  CONSTANTS: cntl_true  TYPE i VALUE 1,
             cntl_false TYPE i VALUE 0.

  DATA:
    h_picture       TYPE REF TO cl_gui_picture,
    h_pic_container TYPE REF TO cl_gui_custom_container.

  DATA: graphic_url(255),
      graphic_refresh(1),
      g_result                     LIKE cntl_true.
  DATA: BEGIN OF graphic_table OCCURS 0,
          line(255) TYPE x,
        END OF graphic_table.
  DATA: graphic_size TYPE i.
  DATA: l_graphic_xstr TYPE xstring,
        l_graphic_conv TYPE i,
        l_graphic_offs TYPE i.
  CALL METHOD cl_ssf_xsf_utilities=>get_bds_graphic_as_bmp
    EXPORTING
      p_object  = 'GRAPHICS'
      p_name    = 'STANFORD_LOGO' "IMAGE NAME - Image name from SE78
      p_id      = 'BMAP'
      p_btype   = 'BCOL'  "(BMON = black&white, BCOL = colour)
    RECEIVING
      p_bmp     = l_graphic_xstr
    EXCEPTIONS
      not_found = 1
      OTHERS    = 2.
*  IF sy-subrc = 1.
*    MESSAGE e287 WITH g_stxbitmaps-tdname.
*  ELSEIF sy-subrc <> 0.
*    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
*    EXIT.
*  ENDIF.
  graphic_size = xstrlen( l_graphic_xstr ).
  CHECK graphic_size > 0.
  l_graphic_conv = graphic_size.
  l_graphic_offs = 0.
  WHILE l_graphic_conv > 255.
    graphic_table-line = l_graphic_xstr+l_graphic_offs(255).
    APPEND graphic_table.
    l_graphic_offs = l_graphic_offs + 255.
    l_graphic_conv = l_graphic_conv - 255.
  ENDWHILE.
  graphic_table-line = l_graphic_xstr+l_graphic_offs(l_graphic_conv).
  APPEND graphic_table.
  CALL FUNCTION 'DP_CREATE_URL'
    EXPORTING
      type     = 'image'               "#EC NOTEXT
      subtype  = cndp_sap_tab_unknown " 'X-UNKNOWN'
      size     = graphic_size
      lifetime = cndp_lifetime_transaction  "'T'
    TABLES
      data     = graphic_table
    CHANGING
      url      = graphic_url
    EXCEPTIONS
*     dp_invalid_parameter = 1
*     dp_error_put_table   = 2
*     dp_error_general     = 3
      OTHERS   = 4.
  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    EXIT.
  ENDIF.
  CREATE OBJECT h_pic_container
    EXPORTING
      container_name = 'PIC'.
  CREATE OBJECT h_picture EXPORTING parent = h_pic_container.
  CALL METHOD h_picture->load_picture_from_url
    EXPORTING
      url    = graphic_url
    IMPORTING
      result = g_result.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  F4_DRNNO
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0040   text
*----------------------------------------------------------------------*
FORM f4_drnno  USING    VALUE(lv_fname) TYPE help_info-dynprofld.
  DATA lr_reqby TYPE RANGE OF zdms_drf-req_by WITH HEADER LINE.
  DATA lr_reqdt TYPE RANGE OF zdms_drf-req_dt WITH HEADER LINE.
  DATA lr_from_dept TYPE RANGE OF zdms_drf-from_dept WITH HEADER LINE.
  DATA lr_to_dept TYPE RANGE OF zdms_drf-to_dept WITH HEADER LINE.
  DATA lt_return TYPE TABLE OF ddshretval .

  IF NOT frm_dept IS INITIAL.
    lr_from_dept-sign = 'I'.
    lr_from_dept-option = 'EQ'.
    lr_from_dept-low = frm_dept.
    APPEND lr_from_dept.
  ENDIF.

  IF NOT to_dept IS INITIAL.
    lr_to_dept-sign = 'I'.
    lr_to_dept-option = 'EQ'.
    lr_to_dept-low = to_dept.
    APPEND lr_to_dept.
  ENDIF.


*  SELECT drn_no FROM zdms_drf
*                INTO TABLE @DATA(lt_zdmsdrf)
*                WHERE from_dept IN @lr_from_dept[] AND
*                      to_dept IN @lr_to_dept[] AND
*                      req_by IN @s_reqby[] AND
*                      req_dt IN @s_rdate[] AND
*                      iss_by IN @s_issby[] AND
*                      apr_by = ' '.
*  IF sy-subrc EQ 0.
*    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*      EXPORTING
*        retfield        = 'DRN_NO'    " Name of field in VALUE_TAB
*        value_org       = 'S'        " Value return: C: cell by cell, S: structured
*        dynpprog        = sy-cprog
*        dynpnr          = sy-dynnr
*        dynprofield     = lv_fname
*      TABLES
*        value_tab       = lt_zdmsdrf  " Table of values: entries cell by cell
*        return_tab      = lt_return  " Return the selected value
*      EXCEPTIONS
*        parameter_error = 1          " Incorrect parameter
*        no_values_found = 2          " No values found
*        OTHERS          = 3.
*  ELSE.
*    RETURN.
*  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  F4_REQBY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_0060   text
*----------------------------------------------------------------------*
FORM f4_reqby  USING  VALUE(lv_fname) TYPE help_info-dynprofld.
  DATA lr_reqby TYPE RANGE OF zdms_drf-req_by WITH HEADER LINE.
  DATA lr_reqdt TYPE RANGE OF zdms_drf-req_dt WITH HEADER LINE.
  DATA lr_from_dept TYPE RANGE OF zdms_drf-from_dept WITH HEADER LINE.
  DATA lr_to_dept TYPE RANGE OF zdms_drf-to_dept WITH HEADER LINE.
  DATA lt_return TYPE TABLE OF ddshretval .

  IF NOT frm_dept IS INITIAL.
    lr_from_dept-sign = 'I'.
    lr_from_dept-option = 'EQ'.
    lr_from_dept-low = frm_dept.
    APPEND lr_from_dept.
  ENDIF.

  IF NOT to_dept IS INITIAL.
    lr_to_dept-sign = 'I'.
    lr_to_dept-option = 'EQ'.
    lr_to_dept-low = to_dept.
    APPEND lr_to_dept.
  ENDIF.


*  SELECT req_by FROM zdms_dept
*                INTO TABLE @DATA(lt_zdmsdept)
*                WHERE ( dept_id IN @lr_from_dept[] OR
*                      dept_id IN @lr_to_dept[] ) AND
*                      req_by IN @s_reqby[] AND
*                      iss_by IN @s_issby[].
*  IF sy-subrc EQ 0.
*    CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
*      EXPORTING
*        retfield        = 'REQ_BY'    " Name of field in VALUE_TAB
*        value_org       = 'S'        " Value return: C: cell by cell, S: structured
*        dynpprog        = sy-cprog
*        dynpnr          = sy-dynnr
*        dynprofield     = lv_fname
*      TABLES
*        value_tab       = lt_zdmsdept  " Table of values: entries cell by cell
*        return_tab      = lt_return  " Return the selected value
*      EXCEPTIONS
*        parameter_error = 1          " Incorrect parameter
*        no_values_found = 2          " No values found
*        OTHERS          = 3.
*  ELSE.
*    RETURN.
*  ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  VALIDATE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM validate .
  IF frm_dept IS INITIAL.
    MESSAGE 'From department is mandatory' TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF.

  IF to_dept IS INITIAL.
    MESSAGE 'To department is mandatory' TYPE 'I'.
    LEAVE LIST-PROCESSING.
  ENDIF.
ENDFORM.

FORM init .
  to_dept = 'QUALITY DEPARTMENT'.
  cl_gui_cfw=>flush( ).
  REFRESH : gt_fieldcat,
            gt_outtab,
            gt_zdmsdrf.

  CLEAR : g_grid,
          g_custom_container,
          g_container,
          gv_update,
          gv_dms.
ENDFORM.
