FUNCTION ZFM_SEND_EMAIL.
*"----------------------------------------------------------------------
*"*"Local Interface:
*"  IMPORTING
*"     REFERENCE(IM_RECLIST) TYPE  SOMLRECI1_T OPTIONAL
*"     REFERENCE(IM_BODY_CONTENT) TYPE  BCSY_TEXT OPTIONAL
*"     REFERENCE(IM_SUBJECT) TYPE  SO_OBJ_DES OPTIONAL
*"     REFERENCE(IM_XSTRING) TYPE  XSTRING OPTIONAL
*"     REFERENCE(IM_STRING) TYPE  STRING OPTIONAL
*"     REFERENCE(IM_ATTCH_NAME) TYPE  SO_OBJ_DES OPTIONAL
*"     REFERENCE(IM_SEND_ID) TYPE  AD_SMTPADR OPTIONAL
*"     REFERENCE(IM_BODY_TYPE) TYPE  SO_OBJ_TP DEFAULT 'RAW'
*"     REFERENCE(IM_ATTACH_TYP) TYPE  SO_OBJ_TP DEFAULT 'PDF'
*"  EXPORTING
*"     REFERENCE(E_MESSAGE) TYPE  STRING
*"  EXCEPTIONS
*"      L_SEND_EXCEPTION
*"----------------------------------------------------------------------

 DATA : ls_reclist         TYPE somlreci1,
         lv_email           TYPE ad_smtpadr,
         send_request       TYPE REF TO cl_bcs,
         document           TYPE REF TO cl_document_bcs,
         gr_sender          TYPE REF TO if_sender_bcs,
         gv_sent_to_all     TYPE os_boolean,
         lo_send            TYPE ad_smtpadr ,
         gr_recipient       TYPE REF TO if_recipient_bcs,
         lt_att_content_hex TYPE solix_tab,
         ls_att_content_hex TYPE solix,
         ls_lines           TYPE tline,
         attachment         TYPE REF TO if_document_bcs,
         lp_pdf_size        TYPE so_obj_len,
         lv_dl_name         TYPE  so_obj_nam,
         lv_obj_type        TYPE soodk-objtp,
         l_send_exception   TYPE REF TO    cx_send_req_bcs,
         l_message          TYPE string,
         lv_size            TYPE so_obj_len.

  IF im_xstring IS NOT INITIAL.
    lt_att_content_hex = cl_document_bcs=>xstring_to_solix( ip_xstring = im_xstring ).
  ELSEIF im_string IS   NOT INITIAL.
    TRY.
        cl_bcs_convert=>string_to_solix(
        EXPORTING
        iv_string = im_string
        iv_codepage = '4103'
        iv_add_bom = 'X'
        IMPORTING
        et_solix = lt_att_content_hex
        ev_size =  lv_size ).
      CATCH cx_bcs.
        MESSAGE e445(so).
    ENDTRY.
  ENDIF.

  TRY.
      send_request = cl_bcs=>create_persistent( ).
    CATCH cx_send_req_bcs INTO l_send_exception.
  ENDTRY.

  document = cl_document_bcs=>create_document(
    i_type    = im_body_type
    i_text    = im_body_content
    i_subject =  im_subject ).

  IF lt_att_content_hex IS NOT INITIAL.
    TRY.
        attachment = cl_document_bcs=>create_document( i_type    = im_attach_typ
                                                       i_hex     = lt_att_content_hex
                                                       i_length  = lp_pdf_size
                                                       i_subject = im_attch_name ).
      CATCH cx_document_bcs .
    ENDTRY.

    TRY.
        lv_obj_type = im_attach_typ.
        document->add_attachment(
          EXPORTING
            i_attachment_type = lv_obj_type
            i_attachment_subject = im_attch_name
            i_att_content_hex = lt_att_content_hex ).

      CATCH cx_document_bcs.
    ENDTRY.
  ENDIF.
  send_request->set_document( document ).
  IF im_send_id IS NOT INITIAL.
    lo_send = im_send_id.
    gr_sender =  cl_cam_address_bcs=>create_internet_address( lo_send ).
    send_request->set_sender( gr_sender ).
  ENDIF.
  TRY.
      LOOP AT im_reclist INTO ls_reclist WHERE receiver IS NOT INITIAL.
        IF ls_reclist-rec_type = 'U'.
          lv_email = ls_reclist-receiver.
          gr_recipient = cl_cam_address_bcs=>create_internet_address( lv_email ).

        ELSEIF ls_reclist-rec_type = 'C'.
          lv_dl_name = ls_reclist-receiver.
          gr_recipient = cl_distributionlist_bcs=>getu_persistent(
          i_dliname = lv_dl_name
          i_private = space ).
        ENDIF.
        IF ls_reclist-copy = 'X'.
          CALL METHOD send_request->add_recipient
            EXPORTING
              i_recipient = gr_recipient
              i_copy      = 'X'.
        ELSE.
          CALL METHOD send_request->add_recipient
            EXPORTING
              i_recipient = gr_recipient
              i_express   = 'X'.
        ENDIF.
      ENDLOOP.

      CALL METHOD send_request->send(
        EXPORTING
          i_with_error_screen = 'X'
        RECEIVING
          result              = gv_sent_to_all ).
      COMMIT WORK.
    CATCH cx_send_req_bcs INTO l_send_exception.
      IF l_send_exception IS BOUND.
        CALL METHOD l_send_exception->if_message~get_text
          RECEIVING
            result = l_message.
        e_message = l_message.
      ENDIF.
  ENDTRY.


ENDFUNCTION.

FORM smartform .

  REFRESH it_final1 .
  MOVE-CORRESPONDING it_final TO it_final1.
  lv_control-preview   = 'X'.       "Preview the output of Smartform
  lv_control-no_dialog = 'X'.       "Don't show Dialog
  lv_output-tddest     = 'LP01'.    "Spool: Output device            P.R
  lv_output-tdnoprint  = ' '.       "No printing from print preview  P.R
  CLEAR: lv_user_set.
  lv_control-getotf = 'X'.
  lv_user_set       = 'X'.                                           " P.R
  CLEAR: it_otf.
  CALL FUNCTION 'SSF_FUNCTION_MODULE_NAME'
    EXPORTING
      formname           = lv_form
    IMPORTING
      fm_name            = lv_name
    EXCEPTIONS
      no_form            = 1
      no_function_module = 2
      OTHERS             = 3.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  CALL FUNCTION lv_name
    EXPORTING
      control_parameters = lv_control
      output_options     = lv_output
      user_settings      = lv_user_set
      it_final           = it_final1
      frt_status         = 'P'
    IMPORTING
      job_output_info    = wa_return
    EXCEPTIONS
      formatting_error   = 1
      internal_error     = 2
      send_error         = 3
      user_canceled      = 4
      OTHERS             = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.
  it_otf[] = wa_return-otfdata[].
  CALL FUNCTION 'CONVERT_OTF'
    EXPORTING
      format                = 'PDF'
    IMPORTING
      bin_file              = it_xstring1
      bin_filesize          = v_len_in
    TABLES
      otf                   = it_otf
      lines                 = i_tline
    EXCEPTIONS
      err_max_linewidth     = 1
      err_format            = 2
      err_conv_not_possible = 3
      err_bad_otf           = 4
      OTHERS                = 5.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.


ENDFORM .

"----------------------------------------------------------------

FORM submit_mail .

  DATA: i_reclist   LIKE somlreci1 OCCURS 0 WITH HEADER LINE,
        it_reclist1 TYPE somlreci1_t,
        wa_reclist1 TYPE somlreci1,
        it_body1    TYPE bcsy_text,
        wa_body1    TYPE soli,
        lv_subject1 TYPE so_obj_des,
        lv_file_nm1 TYPE so_obj_des.
  DATA : it_param TYPE TABLE OF zsd_pri .
  wa_body1-line = 'Sir ,'.
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .
  wa_body1-line = ' '.
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .
  SHIFT track_id LEFT DELETING LEADING '0' .
  CONCATENATE 'Please approve the Price request with track ID:' track_id INTO DATA(line) .
  wa_body1-line = line .
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .
  wa_body1-line = ' '.
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1  .

  wa_body1-line =
 'Approve using transaction code "ZSD_PRICE" . ' .
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .
  wa_body1-line = ' '.
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .

  wa_body1-line =
   'Regards,' .
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .
  wa_body1-line = ' '.
  APPEND wa_body1 TO it_body1 .
  CLEAR : wa_body1 .

  SHIFT track_id LEFT DELETING LEADING '0' .
  CONCATENATE 'Price Approval with Track ID : ' track_id  INTO
   lv_file_nm1.
  SELECT * FROM zsd_pri INTO TABLE it_param
                          WHERE id1 = 'ZSD_PRICING'  .

  LOOP AT it_param INTO DATA(wa_param) .
    CLEAR : wa_reclist1.
    IF wa_param-id2 = 'TO' .
      wa_reclist1-receiver = wa_param-value1.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1  .
      CLEAR : wa_reclist1.
      wa_reclist1-receiver = wa_param-value2.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1 .
      CLEAR : wa_reclist1.
      wa_reclist1-receiver = wa_param-value3.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1  .
      CLEAR : wa_reclist1.
      wa_reclist1-receiver = wa_param-value4.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1  .
      CLEAR : wa_reclist1.
      wa_reclist1-receiver = wa_param-value5.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1  .
      CLEAR : wa_reclist1.
    ELSEIF wa_param-id2 = 'CC' .
      wa_reclist1-copy = 'X' .
      wa_reclist1-receiver = wa_param-value1.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1 .
      CLEAR : wa_reclist1.
      wa_reclist1-copy = 'X' .
      wa_reclist1-receiver = wa_param-value2.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1 .
      CLEAR : wa_reclist1.
      wa_reclist1-copy = 'X' .
      wa_reclist1-receiver = wa_param-value3.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1 .
      CLEAR : wa_reclist1.
      wa_reclist1-copy = 'X' .
      wa_reclist1-receiver = wa_param-value4.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1 .
      CLEAR : wa_reclist1.
      wa_reclist1-copy = 'X' .
      wa_reclist1-receiver = wa_param-value5.
      wa_reclist1-rec_type = 'U' .
      APPEND wa_reclist1 TO it_reclist1 .
      CLEAR : wa_reclist1.
    ENDIF .
  ENDLOOP .
  SELECT SINGLE  * FROM usr21 INTO @DATA(wa_usr)
    WHERE bname = @sy-uname .
  IF wa_usr IS NOT INITIAL .
    SELECT SINGLE * FROM adr6 INTO @DATA(wa_adr6)
      WHERE addrnumber = @wa_usr-addrnumber
      AND persnumber = @wa_usr-persnumber .
    wa_reclist1-copy = 'X' .
    wa_reclist1-receiver = wa_adr6-smtp_addr.
    wa_reclist1-rec_type = 'U' .
    APPEND wa_reclist1 TO it_reclist1 .
    CLEAR : wa_reclist1.
  ENDIF .
  DELETE it_reclist1 WHERE receiver IS INITIAL.
  IF it_reclist1 IS NOT INITIAL .
    CALL FUNCTION 'ZFM_SEND_EMAIL'
      EXPORTING
        im_reclist       = it_reclist1[]
        im_body_content  = it_body1[]
        im_subject       = lv_file_nm1
        im_xstring       = it_xstring1
        im_attch_name    = lv_file_nm1
        im_body_type     = 'RAW'
        im_attach_typ    = 'PDF'
      EXCEPTIONS
        l_send_exception = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
    ELSE .
      CONCATENATE 'Mail sent Successfully For Approval with Track Id' track_id INTO DATA(msg) SEPARATED BY space  .
      MESSAGE msg TYPE 'S' .
    ENDIF.
  ENDIF .

ENDFORM .

