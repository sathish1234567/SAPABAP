*&---------------------------------------------------------------------*
*& Report  YSAT2
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT YSAT2.
TABLES: MARC.

DATA: BEGIN OF ITAB OCCURS 0.
        INCLUDE STRUCTURE MARC.
DATA: END OF ITAB.


*--ALV Grid
DATA: OK_CODE LIKE SY-UCOMM.
DATA: CUSTOM_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER.
DATA: MYCONTAINER TYPE SCRFNAME VALUE 'ALV_CONTAINER'.
DATA: GR_GRID TYPE REF TO CL_GUI_ALV_GRID.
DATA: GR_DOCKING_CONTAINER TYPE REF TO CL_GUI_DOCKING_CONTAINER.
DATA: GT_FIELDCAT TYPE LVC_T_FCAT WITH HEADER LINE.
DATA: LS_FCAT TYPE LVC_S_FCAT .
DATA: LT_FIELDCAT_SLIS TYPE SLIS_T_FIELDCAT_ALV.
DATA: GS_LAYOUT TYPE LVC_S_LAYO.
DATA: GR_DOCUMENT TYPE REF TO CL_DD_DOCUMENT.
DATA: LINE_HEADER TYPE SDYDO_TEXT_ELEMENT.


*----- selection-screen
SELECTION-SCREEN: BEGIN OF BLOCK A1 WITH FRAME TITLE TEXT-001.
SELECT-OPTIONS: S_MATNR FOR MARC-MATNR,
 S_WERKS FOR MARC-WERKS.
SELECTION-SCREEN: END OF BLOCK A1.


*---- start-of-selection
START-OF-SELECTION.


*-- read data into internal table
*  PERFORM GET_DATA.
  APPEND INITIAL LINE TO ITAB[].
  APPEND INITIAL LINE TO ITAB[].
  APPEND INITIAL LINE TO ITAB[].
  CHECK ITAB[] IS NOT INITIAL.

  CALL SCREEN 100.



END-OF-SELECTION.
*&---------------------------------------------------------------------

*& Form GET_DATA
*&---------------------------------------------------------------------

* text
*----------------------------------------------------------------------

* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------

FORM GET_DATA .


  SELECT * INTO CORRESPONDING FIELDS OF TABLE ITAB
  FROM MARC
  WHERE MATNR IN S_MATNR
  AND WERKS IN S_WERKS.

ENDFORM. " GET_DATA
*&---------------------------------------------------------------------*
*& Module STATUS_0100 OUTPUT
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
MODULE STATUS_0100 OUTPUT.

  SET PF-STATUS 'STATUS_100'.

  PERFORM DISPLAY_TABLE.




ENDMODULE. " STATUS_0100 OUTPUT
*&---------------------------------------------------------------------*
*& Module USER_COMMAND_0100 INPUT
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
MODULE USER_COMMAND_0100 INPUT.

  CASE SY-UCOMM.
    WHEN 'BACK'. "Go Back
      LEAVE TO SCREEN 0.
    WHEN 'EXIT'.
      CALL METHOD CUSTOM_CONTAINER->FREE.
      LEAVE TO SCREEN 0.
    WHEN OTHERS.
  ENDCASE.

  CLEAR OK_CODE.

ENDMODULE. " USER_COMMAND_0100 INPUT
*&---------------------------------------------------------------------*
*& Form DISPLAY_TABLE
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM DISPLAY_TABLE .

  IF GR_GRID IS INITIAL.
* create container
*    CREATE OBJECT CUSTOM_CONTAINER
*      EXPORTING
*        PARENT                      = CL_GUI_CUSTOM_CONTAINER=>SCREEN0
**        CONTAINER_NAME              = MYCONTAINER
*      EXCEPTIONS
*        CNTL_ERROR                  = 1
*        CNTL_SYSTEM_ERROR           = 2
*        CREATE_ERROR                = 3
*        LIFETIME_ERROR              = 4
*        LIFETIME_DYNPRO_DYNPRO_LINK = 5.
*    IF SY-SUBRC <> 0.
*      MESSAGE ' erreur container' TYPE 'I'.
*    ENDIF.
* create alv grid
    CREATE OBJECT GR_GRID
      EXPORTING
        I_PARENT          = CL_GUI_CUSTOM_CONTAINER=>SCREEN0
      EXCEPTIONS
        ERROR_CNTL_CREATE = 1
        ERROR_CNTL_INIT   = 2
        ERROR_CNTL_LINK   = 3
        ERROR_DP_CREATE   = 4
        OTHERS            = 5.
    IF SY-SUBRC <> 0.
      MESSAGE ' erreur grid' TYPE 'I'.
    ENDIF.

* prepare Header
    PERFORM PREPARE_HEADER.
* Prepare Footer
    PERFORM PREPARE_FOOTER.
* prepare fielfcatalog
    PERFORM PREPAR_CATALOG.
* prepare layout
    PERFORM PREPAR_LAYOUT.
* fist display
    PERFORM FIRST_DISPLAY.

  ELSE .
    CALL METHOD GR_GRID->REFRESH_TABLE_DISPLAY
      EXCEPTIONS
        FINISHED = 1
        OTHERS   = 2.
  ENDIF.


ENDFORM. " DISPLAY_TABLE
*&---------------------------------------------------------------------*
*& Form PREPAR_CATALOG
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM PREPAR_CATALOG .

  CALL FUNCTION 'REUSE_ALV_FIELDCATALOG_MERGE'
    EXPORTING
      I_PROGRAM_NAME         = SY-REPID
      I_INTERNAL_TABNAME     = 'ITAB'
      I_CLIENT_NEVER_DISPLAY = 'X'
      I_INCLNAME             = SY-REPID
    CHANGING
      CT_FIELDCAT            = LT_FIELDCAT_SLIS.

  CALL FUNCTION 'LVC_TRANSFER_FROM_SLIS'
    EXPORTING
      IT_FIELDCAT_ALV = LT_FIELDCAT_SLIS
    IMPORTING
      ET_FIELDCAT_LVC = GT_FIELDCAT[]
    TABLES
      IT_DATA         = ITAB[]
    EXCEPTIONS
      IT_DATA_MISSING = 1
      OTHERS          = 2.


ENDFORM. " PREPAR_CATALOG
*&---------------------------------------------------------------------*
*& Form PREPAR_LAYOUT
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM PREPAR_LAYOUT .

  GS_LAYOUT-ZEBRA = 'X' .
  GS_LAYOUT-SMALLTITLE = 'X'.

ENDFORM. " PREPAR_LAYOUT
*&---------------------------------------------------------------------*
*& Form FIRST_DISPLAY
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM FIRST_DISPLAY .

  CALL METHOD GR_GRID->SET_TABLE_FOR_FIRST_DISPLAY
    EXPORTING
      IS_LAYOUT                     = GS_LAYOUT
      I_DEFAULT                     = 'X'
    CHANGING
      IT_FIELDCATALOG               = GT_FIELDCAT[]
      IT_OUTTAB                     = ITAB[]
    EXCEPTIONS
      INVALID_PARAMETER_COMBINATION = 1
      PROGRAM_ERROR                 = 2
      TOO_MANY_LINES                = 3
      OTHERS                        = 4.

ENDFORM. " FIRST_DISPLAY
*&---------------------------------------------------------------------*
*& Form PREPARE_HEADER
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM PREPARE_HEADER .

  CREATE OBJECT GR_DOCKING_CONTAINER
    EXPORTING
      REPID = SY-REPID
      DYNNR = '0100'
      RATIO = 20
      SIDE  = GR_DOCKING_CONTAINER->DOCK_AT_TOP.

  CREATE OBJECT GR_DOCUMENT.


  PERFORM ADD_LINE USING 'Day :' SY-DATUM.
  PERFORM ADD_LINE USING 'Time :' SY-UZEIT.


  CALL METHOD GR_DOCUMENT->DISPLAY_DOCUMENT
    EXPORTING
      PARENT = GR_DOCKING_CONTAINER.
  
  

ENDFORM. " PREPARE_HEADER
*&---------------------------------------------------------------------*
*& Form ADD_LINE
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* -->P_0363 text
* -->P_SY_DATUM text
*----------------------------------------------------------------------*
FORM ADD_LINE USING TEXT1
 TEXT2.

  CLEAR LINE_HEADER.
  CONCATENATE TEXT1 TEXT2
  INTO LINE_HEADER RESPECTING BLANKS.

  CALL METHOD GR_DOCUMENT->ADD_TEXT
    EXPORTING
      TEXT         = LINE_HEADER
      SAP_FONTSIZE = CL_DD_DOCUMENT=>MEDIUM
      SAP_EMPHASIS = CL_DD_DOCUMENT=>STRONG.

  CALL METHOD GR_DOCUMENT->NEW_LINE.

ENDFORM. "add_line
*&---------------------------------------------------------------------*
*& Form PREPARE_FOOTER
*&---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --> p1 text
* <-- p2 text
*----------------------------------------------------------------------*
FORM PREPARE_FOOTER .

  CREATE OBJECT GR_DOCKING_CONTAINER
    EXPORTING
      REPID = SY-REPID
      DYNNR = '0100'
      RATIO = 10
      SIDE  = GR_DOCKING_CONTAINER->DOCK_AT_BOTTOM.

  CREATE OBJECT GR_DOCUMENT.


  PERFORM ADD_LINE USING 'Program Name :' SY-REPID.



  CALL METHOD GR_DOCUMENT->DISPLAY_DOCUMENT
    EXPORTING
      PARENT = GR_DOCKING_CONTAINER.

ENDFORM. " PREPARE_FOOTER
