*&---------------------------------------------------------------------*
*& Report  YSAT_TEXTS010
*&
*&---------------------------------------------------------------------*
*&
*&
*&---------------------------------------------------------------------*
REPORT ysat_texts010.
DATA : t_lines TYPE TABLE OF tline,
       x_lines TYPE tline.
DATA : t_body TYPE soli_tab.
DATA  : lt_snwd_so TYPE TABLE OF snwd_so WITH HEADER LINE,
        w_head     TYPE thead.


DATA: v_send_request   TYPE REF TO cl_bcs, " E-Mail Send Request
      v_document       TYPE REF TO cl_document_bcs, " E-Mail Attachment
      v_sender         TYPE REF TO if_sender_bcs, " Address of Sender
      v_recipient      TYPE REF TO if_recipient_bcs, " Distribution List
      v_bcs_exception  TYPE REF TO cx_document_bcs, " BCS Exception
      v_send_exception TYPE REF TO cx_send_req_bcs, " E-Mail sending Exception
      v_addr_exception TYPE REF TO cx_address_bcs. " Address Exception
DATA : v_result  TYPE sy-binpt,
       v_message TYPE string,
       v_sub     TYPE so_obj_des,
       v_rec     TYPE ad_smtpadr.
CALL FUNCTION 'READ_TEXT'
  EXPORTING
    client                  = sy-mandt
    id                      = 'ST' "Standard Text
    language                = sy-langu "System Language
    name                    = 'ZTEST1' "name OF STANDARD TEXT
    object                  = 'TEXT'
  IMPORTING
    header                  = w_head " LIKE  THEAD STRUCTURE  THEAD
  TABLES
    lines                   = t_lines
  EXCEPTIONS
    id                      = 1
    language                = 2
    name                    = 3
    not_found               = 4
    object                  = 5
    reference_check         = 6
    wrong_access_to_archive = 7
    OTHERS                  = 8.
IF sy-subrc <> 0.
  RETURN.
ENDIF.


SELECT  *
       FROM snwd_so
       INTO TABLE lt_snwd_so.
IF sy-subrc EQ 0.
  READ TABLE lt_snwd_so INDEX 1.
* Substitui valor da encomenda
  CALL FUNCTION 'TEXT_SYMBOL_SETVALUE'
    EXPORTING
      name  = '&1&'
      value = lt_snwd_so-client.
* Substitui moeda da encomenda
  CALL FUNCTION 'TEXT_SYMBOL_SETVALUE'
    EXPORTING
      name  = '&2&'
      value = lt_snwd_so-client.

  CALL FUNCTION 'TEXT_SYMBOL_SETVALUE'
    EXPORTING
      name  = '&3&'
      value = lt_snwd_so-client.

  CALL FUNCTION 'TEXT_SYMBOL_SETVALUE'
    EXPORTING
      name  = '&4&'
      value = lt_snwd_so-client.

  CALL FUNCTION 'TEXT_SYMBOL_SETVALUE'
    EXPORTING
      name  = '&5&'
      value = lt_snwd_so-client.


  CALL FUNCTION 'TEXT_SYMBOL_REPLACE'
    EXPORTING
      header = w_head
    TABLES
      lines  = t_lines.


  LOOP AT t_lines INTO x_lines WHERE tdformat NE '/*'.
    APPEND x_lines-tdline TO t_body.
  ENDLOOP.
  PERFORM get_gos_attachement.
*  PERFORM get_gos.
  PERFORM mail.

  BREAK-POINT.

ENDIF.
FORM mail ."using t_body
  TRY.
      v_send_request = cl_bcs=>create_persistent( ).
      v_send_request->set_status_attributes( i_requested_status = 'E' ).
** Creating Document
      IF t_body IS NOT INITIAL.
        v_sub = 'Email using Sstandard text editor as mail body'.
        v_document = cl_document_bcs=>create_document(
        i_type = 'RAW'
        i_importance = '5'
        i_text = t_body
        i_subject = v_sub ).
      ENDIF.
** Add document to send request
      CALL METHOD v_send_request->set_document( v_document ).
** Get Sender Object
      CALL METHOD v_send_request->set_sender
        EXPORTING
          i_sender = v_sender.
* E-Mail l_recipient
      v_rec = 'b.sathish011@xyz.com'.
      v_recipient = cl_cam_address_bcs=>create_internet_address( v_rec ).
      CALL METHOD v_send_request->add_recipient
        EXPORTING
          i_recipient  = v_recipient
*         i_express    = ''
          i_copy       = ' '
          i_blind_copy = ' '
          i_no_forward = ' '.
** Trigger E-Mail immediately
      v_send_request->set_send_immediately( 'X' ).
      CALL METHOD v_send_request->send(
        EXPORTING
          i_with_error_screen = 'X'
        RECEIVING
          result              = v_result ).
      COMMIT WORK.
    CATCH cx_document_bcs INTO v_bcs_exception.
      v_message = v_bcs_exception->get_text( ).
      MESSAGE v_message TYPE 'S'.
    CATCH cx_send_req_bcs INTO v_send_exception.
      v_message = v_send_exception->get_text( ).
      MESSAGE v_message TYPE 'S'.
  ENDTRY.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GOS_ATTACHEMENT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_gos_attachement .
* Internal table declarations.
  DATA: lt_links            TYPE TABLE OF relgraphlk,
        lv_document_id      TYPE sofolenti1-doc_id,
        lt_plist            LIKE sopcklsti1 OCCURS 2 WITH HEADER LINE,
        lt_soli             LIKE soli OCCURS 100 WITH HEADER LINE,
        lt_rec_tab          LIKE somlreci1 OCCURS 1 WITH HEADER LINE,
        lt_roles            TYPE STANDARD TABLE OF relroles,
        lt_appllinks        TYPE STANDARD TABLE OF srl_aprel,
        lt_object_content_l LIKE solisti1 OCCURS 0 WITH HEADER LINE,
        lt_object_content   LIKE solisti1 OCCURS 0 WITH HEADER LINE,
        lt_doc_dat          LIKE sofolenti1,
        t_header            TYPE TABLE OF solisti1,
        w_header            TYPE solisti1,
        w_filename(50)      TYPE          c,
        w_extension(5)      TYPE          c.

* Work areas
  DATA:               lwa_doc_data      LIKE sodocchgi1,
                      lwa_document_data LIKE sofolenti1,
                      lwa_links         LIKE LINE OF lt_links,
                      lwa_object        TYPE borident.
*        lwa_links         LIKE LINE OF lt_links.


* Variables.
  DATA: lv_objtp     LIKE soodk-objtp,
        lv_lang      LIKE tst01-dlang,
        lv_line_size TYPE i VALUE 255,
        lv_name      LIKE soextreci1-receiver.



  lwa_object-objkey = '00000000000'.   " sales order no
  lwa_object-objtype = 'BUS2032'.      " Business Object type for sales order


* Get the attachment list for the input business object type
* and name.
  CALL FUNCTION 'SREL_GET_NEXT_RELATIONS'
    EXPORTING
      object         = lwa_object
      relationtype   = 'ATTA'
    TABLES
      links          = lt_links
      roles          = lt_roles
      appllinks      = lt_appllinks
    EXCEPTIONS
      internal_error = 1
      no_logsys      = 2
      OTHERS         = 3.
* Check the return code.
  IF sy-subrc <> 0.
    MESSAGE 'Error in FM SREL_GET_NEXT_RELATIONS' TYPE 'E'.
  ENDIF.

* Process the attachment list
  LOOP AT lt_links INTO lwa_links.
    MOVE lwa_links-objkey_b TO lv_document_id.

* read the data
    REFRESH : lt_object_content_l, t_header[].
    CLEAR lwa_doCument_data.
    CALL FUNCTION 'SO_DOCUMENT_READ_API1'
      EXPORTING
        document_id                = lv_document_id
      IMPORTING
        document_data              = lwa_document_data
      TABLES
        object_header              = t_header "STRUCTURE  SOLISTI1 OPTIONAL
        object_content             = lt_object_content_l
      EXCEPTIONS
        document_id_not_exist      = 1
        operation_no_authorization = 2
        x_error                    = 3
        OTHERS                     = 4.

    CLEAR lt_plist.
    LOOP AT t_header INTO w_header.

      CASE w_header-line+0(12).
        WHEN '&SO_FILENAME'.
          SHIFT w_header-line LEFT BY 13 PLACES IN CHARACTER MODE.
          SPLIT w_header-line AT '.' INTO w_filename
                                          lt_plist-doc_type "w_extension
                                          IN CHARACTER MODE.
          EXIT.
      ENDCASE.

    ENDLOOP.
    IF lt_plist-doc_type IS INITIAL.
      lt_plist-doc_type = 'EXT'.
    ENDIF.

* Prepare the data.
    lt_plist-transf_bin = 'X'.
    lt_plist-head_start = 0.
    lt_plist-head_num = 0.
    lt_plist-body_start = 0.
    lt_plist-body_num = 0.
*    lt_plist-doc_type = 'RAW'.
    lt_plist-obj_descr = lwa_document_data-obj_descr.
    APPEND lt_plist.

    CLEAR lt_plist.
    lt_plist-transf_bin = 'X'.
    lt_plist-head_start = 0.
    lt_plist-head_num = 0.

    IF sy-tabix = 1.
      lt_plist-body_start = 1.
    ELSE.
      DESCRIBE TABLE lt_object_content.
      lt_plist-body_start = sy-tfill + 1.
    ENDIF.

    DESCRIBE TABLE lt_object_content_l LINES lt_plist-body_num.
    lt_plist-doc_type = lwa_document_data-obj_type.

* Get the size.
    READ TABLE lt_object_content_l INDEX lt_plist-body_num.
    lt_plist-doc_size = ( lt_plist-body_num - 1 ) * lv_line_size
                     + strlen( lt_object_content_l ).
    APPEND lt_plist.

* Move the values to the main internal table.
    APPEND LINES OF lt_object_content_l TO lt_object_content.


  ENDLOOP.


* move the receiver address.
  MOVE: 'b.sathish011@xyz.com'  TO lt_rec_tab-receiver,
        'U'      TO lt_rec_tab-rec_type.
  APPEND lt_rec_tab.

* Set the language.
  lwa_doc_data-obj_langu = sy-langu.

* Email subject.
  CONCATENATE 'GOS '
              '0000000000'      " sales order no
              'attachments'
              INTO lwa_doc_data-obj_descr
              SEPARATED BY space.


*send the email.
  CALL FUNCTION 'SO_DOCUMENT_SEND_API1'
    EXPORTING
      document_data              = lwa_doc_data
      sender_address             = lv_name
      sender_address_type        = 'B'
    TABLES
      packing_list               = lt_plist
      contents_bin               = lt_object_content
      receivers                  = lt_rec_tab
      contents_txt               = t_body[]
    EXCEPTIONS
      too_many_receivers         = 1
      document_not_sent          = 2
      document_type_not_exist    = 3
      operation_no_authorization = 4
      parameter_error            = 5
      x_error                    = 6
      enqueue_error              = 7
      OTHERS                     = 8.
  IF sy-subrc <> 0.
    MESSAGE 'Error in sending email' TYPE 'E'.
  ENDIF.

  COMMIT WORK.

* send the email immediately.
  SUBMIT rsconn01
  WITH mode = 'INT'
  AND RETURN.


* Success message.
  MESSAGE 'Email sent' TYPE 'S'.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GET_GOS
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM get_gos .
*  DATA: w_is_object_a  TYPE          sibflporb,
*        w_rel          TYPE          obl_s_relt,
*        w_links        TYPE          obl_s_link,
*        w_document_id  TYPE          sofolenti1-doc_id,
*        w_lines        TYPE          i,
*        w_contents     TYPE          solisti1,
*        w_filter       TYPE          sofilteri1,
*        w_count        TYPE          i,
*        w_attach(2)    TYPE          n,
*        w_header       TYPE          solisti1,
*        w_filename(50) TYPE          c,
*        w_extension(5) TYPE          c,
*
*        t_rel          TYPE          obl_t_relt,
*        t_links        TYPE          obl_t_link,
*        t_contents     TYPE TABLE OF solisti1,
*        t_header       TYPE TABLE OF solisti1.
*
*
*  REFRESH: t_rel  ,
*           t_links.
*
*  w_is_object_a-instid = w_eban-banfn.
*
*  w_is_object_a-typeid = 'BUS2105'.
*
*  w_is_object_a-catid = 'BO'.
*
*  w_rel-sign   = 'I'.
*
*  w_rel-option = 'EQ'.
*
*  w_rel-low    = 'ATTA'.
*
*  APPEND w_rel TO t_rel.
*
*  CLEAR  w_rel.
*
*  TRY.
*
*      CALL METHOD cl_binary_relation=>read_links
*        EXPORTING
*          is_object           = w_is_object_a
*          it_relation_options = t_rel
*        IMPORTING
*          et_links            = t_links.
*
*    CATCH cx_obl_parameter_error .
*    CATCH cx_obl_internal_error .
*    CATCH cx_obl_model_error .
*
*  ENDTRY.
*
*  DELETE t_links WHERE typeid_b NE 'MESSAGE'.
*
*  w_count = 1.
*
*  LOOP AT t_links INTO w_links.
*
*    ADD 1 TO: w_count ,
*              w_attach.
*
*    w_document_id = w_links-instid_b.
*
*    REFRESH t_contents.
*
*    CLEAR w_filter.
*
*    REFRESH t_header.
*
*    CALL FUNCTION 'SO_DOCUMENT_READ_API1'
*      EXPORTING
*        document_id                = w_document_id
*        filter                     = w_filter
*      TABLES
*        object_header              = t_header
*        object_content             = t_contents
*      EXCEPTIONS
*        document_id_not_exist      = 1
*        operation_no_authorization = 2
*        x_error                    = 3
*        OTHERS                     = 4.
*
*    CASE sy-subrc.
*      WHEN 0.
*
*        CLEAR w_lines.
*
*        DESCRIBE TABLE t_mailbin LINES w_lines.
*
*        ADD 1 TO w_lines.
*
*        CLEAR w_mailpack.
*        w_mailpack-transf_bin = 'X'    .
*        w_mailpack-head_start = w_count.
*        w_mailpack-head_num   = 0      .
*        w_mailpack-body_start = w_lines.
*
*        CLEAR w_lines.
*
*        DESCRIBE TABLE t_contents LINES w_lines.
*
*        w_mailpack-body_num   = w_lines.
*
*        CLEAR: w_filename ,
*               w_extension.
*
*        LOOP AT t_header INTO w_header.
*
*          CASE w_header-line+0(12).
*            WHEN '&SO_FILENAME'.
*
*              SHIFT w_header-line LEFT BY 13 PLACES IN CHARACTER MODE.
*
*              SPLIT w_header-line AT '.' INTO w_filename
*                                              w_extension
*                                              IN CHARACTER MODE.
*
*              EXIT.
*
*          ENDCASE.
*
*        ENDLOOP.
*
*        IF w_extension IS INITIAL.
*
*          w_mailpack-doc_type = 'EXT'.
*
*        ELSE.
*
*          w_mailpack-doc_type = w_extension.
*
*        ENDIF.
*
*        IF w_filename IS INITIAL.
*
*          CONCATENATE 'Attachment No.'(005)
*                      w_attach
*            INTO w_mailpack-obj_descr SEPARATED BY space.
*
*        ELSE.
*
*          w_mailpack-obj_descr = w_filename.
*
*        ENDIF.
*
*        w_mailpack-obj_name = w_mailpack-obj_descr.
*
*        w_mailpack-doc_size   = w_lines * 255.
*
*        w_mailhead-line       = w_mailpack-obj_descr.
*
*        APPEND w_mailhead TO t_mailhead.
*
*        APPEND w_mailpack TO t_mailpack.
*
*        APPEND LINES OF t_contents TO t_mailbin.
*
*    ENDCASE.
*
*  ENDLOOP.
ENDFORM.
